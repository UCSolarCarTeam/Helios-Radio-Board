
Helios-Radio-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e54  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008138  08008138  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008140  08008140  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006094  2000007c  080081c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006110  080081c4  00026110  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220a0  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ab  00000000  00000000  00042189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  00046738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017c6  00000000  00000000  000485f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046cb  00000000  00000000  00049dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd30  00000000  00000000  0004e489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7204  00000000  00000000  0006e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008568  00000000  00000000  001353c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007f7c 	.word	0x08007f7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08007f7c 	.word	0x08007f7c

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b970 	b.w	8000478 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	460f      	mov	r7, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14a      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d965      	bls.n	8000292 <__udivmoddi4+0xe2>
 80001c6:	fab2 f382 	clz	r3, r2
 80001ca:	b143      	cbz	r3, 80001de <__udivmoddi4+0x2e>
 80001cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d0:	f1c3 0220 	rsb	r2, r3, #32
 80001d4:	409f      	lsls	r7, r3
 80001d6:	fa20 f202 	lsr.w	r2, r0, r2
 80001da:	4317      	orrs	r7, r2
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001e2:	fa1f f58c 	uxth.w	r5, ip
 80001e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80001ea:	0c22      	lsrs	r2, r4, #16
 80001ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f4:	fb01 f005 	mul.w	r0, r1, r5
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x62>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 37ff 	add.w	r7, r1, #4294967295
 8000204:	f080 811b 	bcs.w	800043e <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8118 	bls.w	800043e <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	b2a4      	uxth	r4, r4
 8000216:	fbb2 f0fe 	udiv	r0, r2, lr
 800021a:	fb0e 2210 	mls	r2, lr, r0, r2
 800021e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000222:	fb00 f505 	mul.w	r5, r0, r5
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x90>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8106 	bcs.w	8000442 <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8103 	bls.w	8000442 <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	1b64      	subs	r4, r4, r5
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xbc>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ec 	beq.w	8000438 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d149      	bne.n	8000308 <__udivmoddi4+0x158>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xce>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f7 	bhi.w	800046c <__udivmoddi4+0x2bc>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4617      	mov	r7, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa2>
 800028c:	e9c6 4700 	strd	r4, r7, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa2>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xe6>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x20e>
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b0:	fb07 2015 	mls	r0, r7, r5, r2
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ba:	fb0e f005 	mul.w	r0, lr, r5
 80002be:	4290      	cmp	r0, r2
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c2:	eb1c 0202 	adds.w	r2, ip, r2
 80002c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f200 80ca 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002d2:	4645      	mov	r5, r8
 80002d4:	1a12      	subs	r2, r2, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002dc:	fb07 2210 	mls	r2, r7, r0, r2
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x14e>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x14c>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80ba 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002fc:	4610      	mov	r0, r2
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000306:	e79f      	b.n	8000248 <__udivmoddi4+0x98>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa05 f401 	lsl.w	r4, r5, r1
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	40fd      	lsrs	r5, r7
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f901 	lsl.w	r9, r0, r1
 8000326:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	fb00 5518 	mls	r5, r0, r8, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb08 f50e 	mul.w	r5, r8, lr
 8000340:	42a5      	cmp	r5, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	42a5      	cmp	r5, r4
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4464      	add	r4, ip
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	b29d      	uxth	r5, r3
 8000364:	fbb4 f3f0 	udiv	r3, r4, r0
 8000368:	fb00 4413 	mls	r4, r0, r3, r4
 800036c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000370:	fb03 fe0e 	mul.w	lr, r3, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a6      	cmp	lr, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3b02      	subs	r3, #2
 8000388:	4464      	add	r4, ip
 800038a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038e:	fba0 8302 	umull	r8, r3, r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	429c      	cmp	r4, r3
 8000398:	46c6      	mov	lr, r8
 800039a:	461d      	mov	r5, r3
 800039c:	d355      	bcc.n	800044a <__udivmoddi4+0x29a>
 800039e:	d052      	beq.n	8000446 <__udivmoddi4+0x296>
 80003a0:	b156      	cbz	r6, 80003b8 <__udivmoddi4+0x208>
 80003a2:	ebb9 030e 	subs.w	r3, r9, lr
 80003a6:	eb64 0405 	sbc.w	r4, r4, r5
 80003aa:	fa04 f707 	lsl.w	r7, r4, r7
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1c3 0120 	rsb	r1, r3, #32
 80003c2:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c6:	fa20 f201 	lsr.w	r2, r0, r1
 80003ca:	fa25 f101 	lsr.w	r1, r5, r1
 80003ce:	409d      	lsls	r5, r3
 80003d0:	432a      	orrs	r2, r5
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1510 	mls	r5, r7, r0, r1
 80003e2:	0c11      	lsrs	r1, r2, #16
 80003e4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e8:	fb00 f50e 	mul.w	r5, r0, lr
 80003ec:	428d      	cmp	r5, r1
 80003ee:	fa04 f403 	lsl.w	r4, r4, r3
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428d      	cmp	r5, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	1b49      	subs	r1, r1, r5
 8000408:	b292      	uxth	r2, r2
 800040a:	fbb1 f5f7 	udiv	r5, r1, r7
 800040e:	fb07 1115 	mls	r1, r7, r5, r1
 8000412:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000416:	fb05 f10e 	mul.w	r1, r5, lr
 800041a:	4291      	cmp	r1, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x280>
 800041e:	eb1c 0202 	adds.w	r2, ip, r2
 8000422:	f105 38ff 	add.w	r8, r5, #4294967295
 8000426:	d216      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000428:	4291      	cmp	r1, r2
 800042a:	d914      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042c:	3d02      	subs	r5, #2
 800042e:	4462      	add	r2, ip
 8000430:	1a52      	subs	r2, r2, r1
 8000432:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000436:	e739      	b.n	80002ac <__udivmoddi4+0xfc>
 8000438:	4631      	mov	r1, r6
 800043a:	4630      	mov	r0, r6
 800043c:	e709      	b.n	8000252 <__udivmoddi4+0xa2>
 800043e:	4639      	mov	r1, r7
 8000440:	e6e7      	b.n	8000212 <__udivmoddi4+0x62>
 8000442:	4610      	mov	r0, r2
 8000444:	e6fc      	b.n	8000240 <__udivmoddi4+0x90>
 8000446:	45c1      	cmp	r9, r8
 8000448:	d2aa      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 800044a:	ebb8 0e02 	subs.w	lr, r8, r2
 800044e:	eb63 050c 	sbc.w	r5, r3, ip
 8000452:	3801      	subs	r0, #1
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4645      	mov	r5, r8
 8000458:	e7ea      	b.n	8000430 <__udivmoddi4+0x280>
 800045a:	4603      	mov	r3, r0
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4640      	mov	r0, r8
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	46d0      	mov	r8, sl
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3d02      	subs	r5, #2
 8000468:	4462      	add	r2, ip
 800046a:	e733      	b.n	80002d4 <__udivmoddi4+0x124>
 800046c:	4608      	mov	r0, r1
 800046e:	e70b      	b.n	8000288 <__udivmoddi4+0xd8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e743      	b.n	80002fe <__udivmoddi4+0x14e>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fdc8 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f856 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f912 	bl	80006e0 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80004bc:	f000 f8b2 	bl	8000624 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80004c0:	f000 f8c2 	bl	8000648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RadioInit();
 80004c4:	f000 fa14 	bl	80008f0 <RadioInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004c8:	f004 fd04 	bl	8004ed4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  RadioDataQueue = osMessageQueueNew(RADIO_DATA_QUEUE_COUNT, sizeof(struct RadioData), NULL);
 80004cc:	2200      	movs	r2, #0
 80004ce:	210c      	movs	r1, #12
 80004d0:	2010      	movs	r0, #16
 80004d2:	f004 fe3b 	bl	800514c <osMessageQueueNew>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <main+0x88>)
 80004da:	6013      	str	r3, [r2, #0]
  uartRxQueue = osMessageQueueNew(UART_RX_DATA_QUEUE_COUNT, sizeof(uartData), NULL);
 80004dc:	2200      	movs	r2, #0
 80004de:	2108      	movs	r1, #8
 80004e0:	2010      	movs	r0, #16
 80004e2:	f004 fe33 	bl	800514c <osMessageQueueNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <main+0x8c>)
 80004ea:	6013      	str	r3, [r2, #0]
  uartTxQueue = osMessageQueueNew(UART_TX_DATA_QUEUE_COUNT, UART_TX_DATA_SIZE, NULL);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	2010      	movs	r0, #16
 80004f2:	f004 fe2b 	bl	800514c <osMessageQueueNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <main+0x90>)
 80004fa:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <main+0x94>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <main+0x98>)
 8000502:	f004 fd4f 	bl	8004fa4 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <main+0x9c>)
 800050a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of toggleTask */
  radioTaskHandle = osThreadNew(RadioTask, NULL, &radioTask_attributes);
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <main+0xa0>)
 800050e:	2100      	movs	r1, #0
 8000510:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0xa4>)
 8000512:	f004 fd47 	bl	8004fa4 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <main+0xa8>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of toggleTask */
  toggleTaskHandle = osThreadNew(ToggleTask, NULL, &toggleTask_attributes);
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <main+0xac>)
 800051e:	2100      	movs	r1, #0
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0xb0>)
 8000522:	f004 fd3f 	bl	8004fa4 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <main+0xb4>)
 800052a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f004 fd04 	bl	8004f38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x84>
 8000532:	bf00      	nop
 8000534:	2000014c 	.word	0x2000014c
 8000538:	20000144 	.word	0x20000144
 800053c:	20000148 	.word	0x20000148
 8000540:	08008004 	.word	0x08008004
 8000544:	080007fd 	.word	0x080007fd
 8000548:	20000138 	.word	0x20000138
 800054c:	08008028 	.word	0x08008028
 8000550:	08000d11 	.word	0x08000d11
 8000554:	2000013c 	.word	0x2000013c
 8000558:	0800804c 	.word	0x0800804c
 800055c:	080007a9 	.word	0x080007a9
 8000560:	20000140 	.word	0x20000140

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09a      	sub	sp, #104	; 0x68
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2248      	movs	r2, #72	; 0x48
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f007 fc1a 	bl	8007dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xbc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <SystemClock_Config+0xbc>)
 8000594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <SystemClock_Config+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80005aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005bc:	2310      	movs	r3, #16
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 21;
 80005c0:	2315      	movs	r3, #21
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV7;
 80005ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80005ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fb68 	bl	8001cb0 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005e6:	f000 f942 	bl	800086e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005ea:	234f      	movs	r3, #79	; 0x4f
 80005ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fed4 	bl	80023b4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000612:	f000 f92c 	bl	800086e <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3768      	adds	r7, #104	; 0x68
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	58000400 	.word	0x58000400

08000624 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */
  //CLK = 32MHz, and acoridng to SUBGHZ module datasheet max SPI CLK = 16MHz, using 8MHz to be safe
  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_SUBGHZ_Init+0x20>)
 800062a:	2208      	movs	r2, #8
 800062c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_SUBGHZ_Init+0x20>)
 8000630:	f002 fc7c 	bl	8002f2c <HAL_SUBGHZ_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800063a:	f000 f918 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000098 	.word	0x20000098

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 800064e:	4a23      	ldr	r2, [pc, #140]	; (80006dc <MX_USART2_UART_Init+0x94>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 8000692:	f003 fa9b 	bl	8003bcc <HAL_UART_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800069c:	f000 f8e7 	bl	800086e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a0:	2100      	movs	r1, #0
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 80006a4:	f004 fb48 	bl	8004d38 <HAL_UARTEx_SetTxFifoThreshold>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006ae:	f000 f8de 	bl	800086e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 80006b6:	f004 fb7d 	bl	8004db4 <HAL_UARTEx_SetRxFifoThreshold>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006c0:	f000 f8d5 	bl	800086e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_USART2_UART_Init+0x90>)
 80006c6:	f004 faff 	bl	8004cc8 <HAL_UARTEx_DisableFifoMode>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006d0:	f000 f8cd 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff fec1 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff febe 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff febb 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <MX_GPIO_Init+0xc0>)
 800070e:	f000 ffe6 	bl	80016de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2138      	movs	r1, #56	; 0x38
 8000716:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000718:	f000 ffe1 	bl	80016de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LED_Pin GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin|RED_LED_Pin;
 800071c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	481b      	ldr	r0, [pc, #108]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000734:	f000 fe5c 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000738:	2338      	movs	r3, #56	; 0x38
 800073a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800074e:	f000 fe4f 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	2301      	movs	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f000 fe43 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800077c:	f000 fe38 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000780:	2302      	movs	r3, #2
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fe2c 	bl	80013f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800

080007a8 <ToggleTask>:
  * @brief  Function implementing the toggleTask thread.
  * @param  argument: Not used
  * @retval None
  */
void ToggleTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  RadioData radioData = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {
#if TX
    radioData.ID = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	81bb      	strh	r3, [r7, #12]
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 80007c0:	2101      	movs	r1, #1
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 ff73 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <ToggleTask+0x2e>
        radioData.data[0] = 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	73bb      	strb	r3, [r7, #14]
 80007d4:	e001      	b.n	80007da <ToggleTask+0x32>
    } else {
        radioData.data[0] = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73bb      	strb	r3, [r7, #14]
    }
    radioData.size = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	75bb      	strb	r3, [r7, #22]
    osMessageQueuePut(RadioDataQueue, &radioData, 0, 0);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <ToggleTask+0x50>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	2300      	movs	r3, #0
 80007e8:	2200      	movs	r2, #0
 80007ea:	f004 fd35 	bl	8005258 <osMessageQueuePut>
    osDelay(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f004 fc7e 	bl	80050f0 <osDelay>
    radioData.ID = 1;
 80007f4:	e7e2      	b.n	80007bc <ToggleTask+0x14>
 80007f6:	bf00      	nop
 80007f8:	2000014c 	.word	0x2000014c

080007fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  RadioData radioData = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {
#if TX
    radioData.ID = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	81bb      	strh	r3, [r7, #12]
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 ff49 	bl	80016b0 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <StartDefaultTask+0x2e>
        radioData.data[0] = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	73bb      	strb	r3, [r7, #14]
 8000828:	e001      	b.n	800082e <StartDefaultTask+0x32>
    } else {
        radioData.data[0] = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73bb      	strb	r3, [r7, #14]
    }
    radioData.size = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	75bb      	strb	r3, [r7, #22]
    osMessageQueuePut(RadioDataQueue, &radioData, 0, 0);
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <StartDefaultTask+0x50>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	2300      	movs	r3, #0
 800083c:	2200      	movs	r2, #0
 800083e:	f004 fd0b 	bl	8005258 <osMessageQueuePut>
    osDelay(5);
 8000842:	2005      	movs	r0, #5
 8000844:	f004 fc54 	bl	80050f0 <osDelay>
    radioData.ID = 1;
 8000848:	e7e2      	b.n	8000810 <StartDefaultTask+0x14>
 800084a:	bf00      	nop
 800084c:	2000014c 	.word	0x2000014c

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 fc0f 	bl	8001084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x8>

08000878 <RadioSetCommand>:
                            .lsyncrH = 0xA5, //register value
                            .lsyncrL = 0xA5 //register value
                            };

//TODO: There must be a nicer way to have Mutexes or change SUBGHZ_Handle name be used or unused with a single macro (perhaps macro function declaration)
void RadioSetCommand(SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer, uint16_t Size) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	80bb      	strh	r3, [r7, #4]
    //if(osMutexWait(SUBGHZMutexHandle, 0) == osOK)
    {
        HAL_SUBGHZ_ExecSetCmd(&hsubghz, Command, pBuffer, Size);
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	79f9      	ldrb	r1, [r7, #7]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <RadioSetCommand+0x24>)
 8000890:	f002 fc0f 	bl	80030b2 <HAL_SUBGHZ_ExecSetCmd>
        //osMutexRelease(SUBGHZMutexHandle);
    }
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000098 	.word	0x20000098

080008a0 <RadioWriteBuffer>:
    {
        HAL_SUBGHZ_ExecGetCmd(&hsubghz, Command, pBuffer, Size);
        //osMutexRelease(SUBGHZMutexHandle);
    }
}
void RadioWriteBuffer(uint8_t Offset, uint8_t *pBuffer, uint16_t Size) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	80bb      	strh	r3, [r7, #4]
    //if(osMutexWait(SUBGHZMutexHandle, 0) == osOK)
    {
        HAL_SUBGHZ_WriteBuffer(&hsubghz, Offset, pBuffer, Size);
 80008b0:	88bb      	ldrh	r3, [r7, #4]
 80008b2:	79f9      	ldrb	r1, [r7, #7]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <RadioWriteBuffer+0x24>)
 80008b8:	f002 fcae 	bl	8003218 <HAL_SUBGHZ_WriteBuffer>
        //osMutexRelease(SUBGHZMutexHandle);
    }
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000098 	.word	0x20000098

080008c8 <RadioWriteRegisters>:
    {
        HAL_SUBGHZ_ReadBuffer(&hsubghz, Offset, pBuffer, Size);
        //osMutexRelease(SUBGHZMutexHandle);
    }
}
void RadioWriteRegisters(uint16_t Address, uint8_t *pBuffer, uint16_t Size) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	80fb      	strh	r3, [r7, #6]
 80008d4:	4613      	mov	r3, r2
 80008d6:	80bb      	strh	r3, [r7, #4]
    //if(osMutexWait(SUBGHZMutexHandle, 0) == osOK)
    {
        HAL_SUBGHZ_WriteRegisters(&hsubghz, Address, pBuffer, Size);
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	88f9      	ldrh	r1, [r7, #6]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <RadioWriteRegisters+0x24>)
 80008e0:	f002 fb88 	bl	8002ff4 <HAL_SUBGHZ_WriteRegisters>
        //osMutexRelease(SUBGHZMutexHandle);
    }
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000098 	.word	0x20000098

080008f0 <RadioInit>:
        //osMutexRelease(SUBGHZMutexHandle);
    }
}

void RadioInit() 
{
 80008f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008f4:	b0d0      	sub	sp, #320	; 0x140
 80008f6:	af00      	add	r7, sp, #0
    osDelay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f004 fbf9 	bl	80050f0 <osDelay>

    //enable SMPS clock detection, to use external TCXO
    uint8_t SMPSC0R[] = {radioConfig.SMPSEenable};
 80008fe:	4b9b      	ldr	r3, [pc, #620]	; (8000b6c <RadioInit+0x27c>)
 8000900:	7c1b      	ldrb	r3, [r3, #16]
 8000902:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
    uint16_t address = SUBGHZ_SMPSC0R;
 8000906:	f640 1316 	movw	r3, #2326	; 0x916
 800090a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    uint16_t size = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    RadioWriteRegisters(SUBGHZ_SMPSC0R, SMPSC0R, size);
 8000914:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800091c:	4619      	mov	r1, r3
 800091e:	f640 1016 	movw	r0, #2326	; 0x916
 8000922:	f7ff ffd1 	bl	80008c8 <RadioWriteRegisters>

    //SMPS mode used
    uint8_t regulator_mode[] = {radioConfig.regulatorMode};
 8000926:	4b91      	ldr	r3, [pc, #580]	; (8000b6c <RadioInit+0x27c>)
 8000928:	7c5b      	ldrb	r3, [r3, #17]
 800092a:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
    RadioSetCommand(RADIO_SET_REGULATORMODE, regulator_mode, size);
 800092e:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000932:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000936:	4619      	mov	r1, r3
 8000938:	2096      	movs	r0, #150	; 0x96
 800093a:	f7ff ff9d 	bl	8000878 <RadioSetCommand>

    //set standby with RC13 clock
    uint8_t standbyCfg[] = {0x00};
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
    RadioSetCommand(RADIO_SET_STANDBY, standbyCfg, size);
 8000944:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000948:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800094c:	4619      	mov	r1, r3
 800094e:	2080      	movs	r0, #128	; 0x80
 8000950:	f7ff ff92 	bl	8000878 <RadioSetCommand>

    //set address for relevant buffers
    uint8_t bufferBaseAddress[] = {radioConfig.TXaddress, radioConfig.RXaddress};
 8000954:	4b85      	ldr	r3, [pc, #532]	; (8000b6c <RadioInit+0x27c>)
 8000956:	7c9b      	ldrb	r3, [r3, #18]
 8000958:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 800095c:	4b83      	ldr	r3, [pc, #524]	; (8000b6c <RadioInit+0x27c>)
 800095e:	7cdb      	ldrb	r3, [r3, #19]
 8000960:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
    size = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    RadioSetCommand(RADIO_SET_BUFFERBASEADDRESS, bufferBaseAddress, size);
 800096a:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 800096e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000972:	4619      	mov	r1, r3
 8000974:	208f      	movs	r0, #143	; 0x8f
 8000976:	f7ff ff7f 	bl	8000878 <RadioSetCommand>


#if LORA
    //LORA packet type
    uint8_t packetType[] = {0x01};
 800097a:	2301      	movs	r3, #1
 800097c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
#elif FSK
    //FSK packet type
    uint8_t packetType[] = {0x00};
#endif
    size = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    RadioSetCommand(RADIO_SET_PACKETTYPE, packetType, size);
 8000986:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 800098a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800098e:	4619      	mov	r1, r3
 8000990:	208a      	movs	r0, #138	; 0x8a
 8000992:	f7ff ff71 	bl	8000878 <RadioSetCommand>

#if LORA
    // 12 preamble symbols, explicit header (variable size), size (overwritten), CRC disabled, standard IQ setup (no idea)
    uint8_t packetParameters[] = {radioConfig.preambleSymbols >> 8, radioConfig.preambleSymbols & 0xFF, radioConfig.payloadLength, radioConfig.headerType, radioConfig.CRCenable, radioConfig.invertIQ};
 8000996:	4b75      	ldr	r3, [pc, #468]	; (8000b6c <RadioInit+0x27c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	121b      	asrs	r3, r3, #8
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80009a2:	4b72      	ldr	r3, [pc, #456]	; (8000b6c <RadioInit+0x27c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80009aa:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <RadioInit+0x27c>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80009b2:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <RadioInit+0x27c>)
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80009ba:	4b6c      	ldr	r3, [pc, #432]	; (8000b6c <RadioInit+0x27c>)
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009c2:	4b6a      	ldr	r3, [pc, #424]	; (8000b6c <RadioInit+0x27c>)
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
    size = 6;
 80009ca:	2306      	movs	r3, #6
 80009cc:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
#elif FSK
    //12 preamble symbols, preamble detection disabled, 8 bit sync word,addres comparison/filtering disabled, fixed payload, payload_length (overwritten), CRC disabled, whitening disabled
    uint8_t packetParameters[] = {0x00, 0x0C, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00};
    size = 9;
#endif
    RadioSetCommand(RADIO_SET_PACKETPARAMS, packetParameters, size);
 80009d0:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 80009d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d8:	4619      	mov	r1, r3
 80009da:	208c      	movs	r0, #140	; 0x8c
 80009dc:	f7ff ff4c 	bl	8000878 <RadioSetCommand>

#if LORA
    //sync conf, not sure what these are so all disabled
    uint8_t GBSYNCR[] = {radioConfig.gbsyncr};
 80009e0:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <RadioInit+0x27c>)
 80009e2:	7e5b      	ldrb	r3, [r3, #25]
 80009e4:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
    address = 0x6AC;
 80009e8:	f240 63ac 	movw	r3, #1708	; 0x6ac
 80009ec:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    RadioWriteRegisters(address, GBSYNCR, size);
 80009f0:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 80009f4:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80009f8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff63 	bl	80008c8 <RadioWriteRegisters>

    //sync words (must the same on receiver and transmitter)
    uint8_t LSYNCRH[] = {radioConfig.lsyncrH};
 8000a02:	4b5a      	ldr	r3, [pc, #360]	; (8000b6c <RadioInit+0x27c>)
 8000a04:	7e9b      	ldrb	r3, [r3, #26]
 8000a06:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
    address = 0x740;
 8000a0a:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8000a0e:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    RadioWriteRegisters(address, LSYNCRH, size);
 8000a12:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000a16:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a1a:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff52 	bl	80008c8 <RadioWriteRegisters>

    uint8_t LSYNCRL[] = {radioConfig.lsyncrL};
 8000a24:	4b51      	ldr	r3, [pc, #324]	; (8000b6c <RadioInit+0x27c>)
 8000a26:	7edb      	ldrb	r3, [r3, #27]
 8000a28:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
    address = 0x741;
 8000a2c:	f240 7341 	movw	r3, #1857	; 0x741
 8000a30:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    RadioWriteRegisters(address, LSYNCRL, size);
 8000a34:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000a38:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000a3c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff41 	bl	80008c8 <RadioWriteRegisters>
#endif

    //used to set frequency, copied from stm32wl code package
    uint32_t channel = (uint32_t) ((((uint64_t) radioConfig.frequency)<<25)/(XTAL_FREQ) );
 8000a46:	4b49      	ldr	r3, [pc, #292]	; (8000b6c <RadioInit+0x27c>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	4615      	mov	r5, r2
 8000a50:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8000a54:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8000a58:	4a45      	ldr	r2, [pc, #276]	; (8000b70 <RadioInit+0x280>)
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	4640      	mov	r0, r8
 8000a60:	4649      	mov	r1, r9
 8000a62:	f7ff fb8d 	bl	8000180 <__aeabi_uldivmod>
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint8_t RFfreq[4];
    RFfreq[0] = ( uint8_t )( ( channel >> 24 ) & 0xFF );
 8000a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a74:	0e1b      	lsrs	r3, r3, #24
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
    RFfreq[1] = ( uint8_t )( ( channel >> 16 ) & 0xFF );
 8000a7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    RFfreq[2] = ( uint8_t )( ( channel >> 8 ) & 0xFF );
 8000a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    RFfreq[3] = ( uint8_t )( channel & 0xFF );
 8000a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    size = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    RadioSetCommand(RADIO_SET_RFFREQUENCY, RFfreq, size);
 8000aa4:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000aac:	4619      	mov	r1, r3
 8000aae:	2086      	movs	r0, #134	; 0x86
 8000ab0:	f7ff fee2 	bl	8000878 <RadioSetCommand>

#if LORA
    //SF of 8, BW of 62.5, CR 4/5
    uint8_t modulationParamaters[] = {radioConfig.spreadingFactor, radioConfig.bandwith, radioConfig.cr, radioConfig.ldrOptimization};
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <RadioInit+0x27c>)
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <RadioInit+0x27c>)
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <RadioInit+0x27c>)
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <RadioInit+0x27c>)
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    size = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
#elif FSK
    uint8_t data8[] = {0x01, 0x90, 0x00, 0x00, 0x0B, 0x00, 0x00, 0xD2};
    uint16_t size10 = 8;
#endif
    RadioSetCommand(RADIO_SET_MODULATIONPARAMS, modulationParamaters, size);
 8000ada:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8000ade:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	208b      	movs	r0, #139	; 0x8b
 8000ae6:	f7ff fec7 	bl	8000878 <RadioSetCommand>

    //Clear up data buffer in radio module (unnecessary, but used for debugging)
    uint8_t zero_buffer[256];
    for(int i = 0; i < 256; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000af0:	e00d      	b.n	8000b0e <RadioInit+0x21e>
      zero_buffer[i] = 0;
 8000af2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000af6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8000afa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000afe:	4413      	add	r3, r2
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 256; i++)
 8000b04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000b0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000b12:	2bff      	cmp	r3, #255	; 0xff
 8000b14:	dded      	ble.n	8000af2 <RadioInit+0x202>
    RadioWriteBuffer(0, zero_buffer, 255);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	22ff      	movs	r2, #255	; 0xff
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff febf 	bl	80008a0 <RadioWriteBuffer>
    osDelay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f004 fae4 	bl	80050f0 <osDelay>

    //Clear interrupts
    uint8_t IRQClear[] = {0x03, 0xFF};
 8000b28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b30:	f64f 7203 	movw	r2, #65283	; 0xff03
 8000b34:	801a      	strh	r2, [r3, #0]
    RadioSetCommand(RADIO_CLR_IRQSTATUS, IRQClear, 2);
 8000b36:	463b      	mov	r3, r7
 8000b38:	2202      	movs	r2, #2
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fe9b 	bl	8000878 <RadioSetCommand>

#if TX
    RadioSetupTX();
 8000b42:	f000 f819 	bl	8000b78 <RadioSetupTX>
    //Debug lights
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <RadioInit+0x284>)
 8000b4e:	f000 fdc6 	bl	80016de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <RadioInit+0x284>)
 8000b5a:	f000 fdc0 	bl	80016de <HAL_GPIO_WritePin>
    RadioSetupRX();
    //Debug lights
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
#endif
}
 8000b5e:	bf00      	nop
 8000b60:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000b64:	46bd      	mov	sp, r7
 8000b66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	01e84800 	.word	0x01e84800
 8000b74:	48000400 	.word	0x48000400

08000b78 <RadioSetupTX>:

#if TX
void RadioSetupTX()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
    osDelay(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f004 fab6 	bl	80050f0 <osDelay>

    // HP PA mode, HP PA max power, last byte must be 0x01 according to datasheet
    uint8_t paConfig[] = {radioConfig.paDutyCycle, radioConfig.hpMax, radioConfig.paSel, 0x01};
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <RadioSetupTX+0x94>)
 8000b86:	7d9b      	ldrb	r3, [r3, #22]
 8000b88:	743b      	strb	r3, [r7, #16]
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <RadioSetupTX+0x94>)
 8000b8c:	7ddb      	ldrb	r3, [r3, #23]
 8000b8e:	747b      	strb	r3, [r7, #17]
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <RadioSetupTX+0x94>)
 8000b92:	7e1b      	ldrb	r3, [r3, #24]
 8000b94:	74bb      	strb	r3, [r7, #18]
 8000b96:	2301      	movs	r3, #1
 8000b98:	74fb      	strb	r3, [r7, #19]
    uint16_t size = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	82fb      	strh	r3, [r7, #22]
    RadioSetCommand(RADIO_SET_PACONFIG, paConfig, size);
 8000b9e:	8afa      	ldrh	r2, [r7, #22]
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2095      	movs	r0, #149	; 0x95
 8000ba8:	f7ff fe66 	bl	8000878 <RadioSetCommand>

    //22db power, 800 μs ramp time. not sure how ramp up time affects performance, must research
    uint8_t txParameters[] = {radioConfig.power, radioConfig.rampTime};
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <RadioSetupTX+0x94>)
 8000bae:	7d1b      	ldrb	r3, [r3, #20]
 8000bb0:	733b      	strb	r3, [r7, #12]
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <RadioSetupTX+0x94>)
 8000bb4:	7d5b      	ldrb	r3, [r3, #21]
 8000bb6:	737b      	strb	r3, [r7, #13]
    size = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	82fb      	strh	r3, [r7, #22]
    RadioSetCommand(RADIO_SET_TXPARAMS, txParameters, size);
 8000bbc:	8afa      	ldrh	r2, [r7, #22]
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	208e      	movs	r0, #142	; 0x8e
 8000bc6:	f7ff fe57 	bl	8000878 <RadioSetCommand>

    //enable RX done, TX done, and RX/TX timeout interrupts on IRQ line 1 (from my understanding, an IRQ line can only halt processor once at a time)
    uint8_t dioIRQConfig[] = {0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; 
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <RadioSetupTX+0x98>)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd2:	e883 0003 	stmia.w	r3, {r0, r1}
    size = 8;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	82fb      	strh	r3, [r7, #22]
    RadioSetCommand(RADIO_CFG_DIOIRQ, dioIRQConfig, size);
 8000bda:	8afa      	ldrh	r2, [r7, #22]
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	2008      	movs	r0, #8
 8000be2:	f7ff fe49 	bl	8000878 <RadioSetCommand>

#if RF_HP
    //Relay setup for HP TX according to dev-board datasheet
    HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2110      	movs	r1, #16
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <RadioSetupTX+0x9c>)
 8000bec:	f000 fd77 	bl	80016de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <RadioSetupTX+0x9c>)
 8000bf6:	f000 fd72 	bl	80016de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <RadioSetupTX+0x9c>)
 8000c00:	f000 fd6d 	bl	80016de <HAL_GPIO_WritePin>
    //Relay setup for HP RX according to dev-board datasheet
    HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
#endif
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	08007fc4 	.word	0x08007fc4
 8000c14:	48000800 	.word	0x48000800

08000c18 <RadioTransmit>:
    //used to debug and create a wave and output freq
    RadioSetCommand(RADIO_SET_TXCONTINUOUSWAVE, NULL, 0);
}

int RadioTransmit(uint8_t* data, uint8_t size)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
    //Check if packet fits in the current TX buffer size
    if(size <= radioConfig.RXaddress - radioConfig.TXaddress)  {
 8000c24:	78fa      	ldrb	r2, [r7, #3]
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <RadioTransmit+0x98>)
 8000c28:	7cdb      	ldrb	r3, [r3, #19]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <RadioTransmit+0x98>)
 8000c2e:	7c9b      	ldrb	r3, [r3, #18]
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dc36      	bgt.n	8000ca4 <RadioTransmit+0x8c>
      RadioWriteBuffer(radioConfig.TXaddress, data, size);
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <RadioTransmit+0x98>)
 8000c38:	7c9b      	ldrb	r3, [r3, #18]
 8000c3a:	78fa      	ldrb	r2, [r7, #3]
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe2d 	bl	80008a0 <RadioWriteBuffer>
#if LORA
    // 12 preamble symbols, explicit header (variable size), size (overwritten), CRC disabled, standard IQ setup (no idea)
    uint8_t packetParameters[] = {radioConfig.preambleSymbols >> 8, radioConfig.preambleSymbols & 0xFF, size, radioConfig.headerType, radioConfig.CRCenable, radioConfig.invertIQ};
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <RadioTransmit+0x98>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	121b      	asrs	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	733b      	strb	r3, [r7, #12]
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <RadioTransmit+0x98>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	737b      	strb	r3, [r7, #13]
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	73bb      	strb	r3, [r7, #14]
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <RadioTransmit+0x98>)
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <RadioTransmit+0x98>)
 8000c62:	78db      	ldrb	r3, [r3, #3]
 8000c64:	743b      	strb	r3, [r7, #16]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <RadioTransmit+0x98>)
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	747b      	strb	r3, [r7, #17]
    uint8_t commandSize = 6;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	75fb      	strb	r3, [r7, #23]
#elif FSK
    //12 preamble symbols, preamble detection disabled, 8 bit sync word,addres comparison/filtering disabled, fixed payload, payload_length (overwritten), CRC disabled, whitening disabled
    uint8_t packetParameters[] = {0x00, 0x0C, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00};
    uint8_t commandSize = 9;
#endif
      RadioSetCommand(RADIO_SET_PACKETPARAMS, packetParameters, commandSize);
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	208c      	movs	r0, #140	; 0x8c
 8000c7c:	f7ff fdfc 	bl	8000878 <RadioSetCommand>
    else {
      return 0;
    }

    //TX oneshot with no timeout
    uint8_t timeout[] = {0x00, 0x00, 0x00}; 
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <RadioTransmit+0x9c>)
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	8019      	strh	r1, [r3, #0]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	0c12      	lsrs	r2, r2, #16
 8000c90:	701a      	strb	r2, [r3, #0]
    RadioSetCommand(RADIO_SET_TX, timeout, 3);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2203      	movs	r2, #3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2083      	movs	r0, #131	; 0x83
 8000c9c:	f7ff fdec 	bl	8000878 <RadioSetCommand>

    //Add handle of failed TX (blink the blue LED if so)

    return 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <RadioTransmit+0x8e>
      return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	08007fcc 	.word	0x08007fcc

08000cb8 <RadioLoop>:
  RadioGetCommand(RADIO_GET_STATS, stats, 7);
}

//main radio function, called by the radioTask
void RadioLoop()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
#if TX
    RadioData radioData = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

    osMessageQueueGet(RadioDataQueue, &radioData, NULL, 0);
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <RadioLoop+0x54>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f107 010c 	add.w	r1, r7, #12
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f004 fb33 	bl	8005340 <osMessageQueueGet>
 8000cda:	89bb      	ldrh	r3, [r7, #12]

    uint8_t data[10];
    memcpy(data, &(radioData.ID), 2);
 8000cdc:	803b      	strh	r3, [r7, #0]
    memcpy(&(data[2]), radioData.data, radioData.size);
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	1c99      	adds	r1, r3, #2
 8000ce8:	463b      	mov	r3, r7
 8000cea:	3302      	adds	r3, #2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f007 f8e1 	bl	8007eb4 <memcpy>
    RadioTransmit(data, radioData.size + 2);
 8000cf2:	7dbb      	ldrb	r3, [r7, #22]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff8b 	bl	8000c18 <RadioTransmit>
#elif RX
    RadioReceive();
#endif
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000014c 	.word	0x2000014c

08000d10 <RadioTask>:
  * @brief  Function implementing the RadioTask thread.
  * @param  argument: Not used
  * @retval None
*/
void RadioTask(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    RadioLoop();
 8000d18:	f7ff ffce 	bl	8000cb8 <RadioLoop>
 8000d1c:	e7fc      	b.n	8000d18 <RadioTask+0x8>

08000d1e <LL_AHB2_GRP1_EnableClock>:
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	f06f 0001 	mvn.w	r0, #1
 8000dba:	f000 fa34 	bl	8001226 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff ffd7 	bl	8000d7e <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f000 fa26 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000dda:	2032      	movs	r0, #50	; 0x32
 8000ddc:	f000 fa3d 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b096      	sub	sp, #88	; 0x58
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2238      	movs	r2, #56	; 0x38
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 ffcf 	bl	8007dac <memset>
  if(huart->Instance==USART2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d12e      	bne.n	8000e76 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e1c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fecc 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e32:	f7ff fd1c 	bl	800086e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e3a:	f7ff ff88 	bl	8000d4e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff ff6d 	bl	8000d1e <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000e44:	230c      	movs	r3, #12
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fac5 	bl	80013f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2105      	movs	r1, #5
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 f9db 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 f9f2 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3758      	adds	r7, #88	; 0x58
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40004400 	.word	0x40004400

08000e84 <LL_APB1_GRP1_EnableClock>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ffda 	bl	8000e84 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fc84 	bl	80027e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee0:	f001 fc5e 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8000ee4:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <HAL_InitTick+0xbc>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_InitTick+0xc0>)
 8000ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_InitTick+0xc0>)
 8000efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_InitTick+0xc0>)
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_InitTick+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_InitTick+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <HAL_InitTick+0xc0>)
 8000f18:	f002 fbca 	bl	80036b0 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000f22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11b      	bne.n	8000f62 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <HAL_InitTick+0xc0>)
 8000f2c:	f002 fc20 	bl	8003770 <HAL_TIM_Base_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d111      	bne.n	8000f62 <HAL_InitTick+0xae>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3e:	201b      	movs	r0, #27
 8000f40:	f000 f98b 	bl	800125a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d808      	bhi.n	8000f5c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	201b      	movs	r0, #27
 8000f50:	f000 f969 	bl	8001226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_InitTick+0xc4>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e002      	b.n	8000f62 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	20000150 	.word	0x20000150
 8000f78:	20000020 	.word	0x20000020

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM2_IRQHandler+0x10>)
 8000fae:	f002 fc2b 	bl	8003808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000150 	.word	0x20000150

08000fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART2_IRQHandler+0x10>)
 8000fc2:	f002 fe53 	bl	8003c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000a4 	.word	0x200000a4

08000fd0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000fd6:	f002 f972 	bl	80032be <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000098 	.word	0x20000098

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff4:	f7ff fff6 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800101e:	f006 ff23 	bl	8007e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001022:	f7ff fa43 	bl	80004ac <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   r0, =_estack
 8001028:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001034:	08008148 	.word	0x08008148
  ldr r2, =_sbss
 8001038:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800103c:	20006110 	.word	0x20006110

08001040 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f8de 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001054:	f001 fb90 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8001058:	4603      	mov	r3, r0
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_Init+0x3c>)
 800105c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff ff28 	bl	8000eb4 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fe9d 	bl	8000dae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000001c 	.word	0x2000001c

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x20>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000024 	.word	0x20000024
 80010a4:	2000019c 	.word	0x2000019c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	2000019c 	.word	0x2000019c

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4906      	ldr	r1, [pc, #24]	; (8001154 <__NVIC_EnableIRQ+0x34>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff4f 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff66 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ffb4 	bl	80011ac <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff83 	bl	8001158 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff59 	bl	8001120 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e04f      	b.n	8001328 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e040      	b.n	8001328 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 021c 	and.w	r2, r3, #28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2101      	movs	r1, #1
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00c      	beq.n	8001316 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800130a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001314:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d005      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e047      	b.n	80013e6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020e 	bic.w	r2, r2, #14
 8001364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 021c 	and.w	r2, r3, #28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00c      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
    }
  }
  return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e140      	b.n	8001682 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8132 	beq.w	800167c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x40>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 808c 	beq.w	800167c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x2b0>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1bc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <HAL_GPIO_Init+0x2b4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1b8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <HAL_GPIO_Init+0x2b8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1b4>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1be>
 80015a4:	2307      	movs	r3, #7
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1be>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1be>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015be:	4938      	ldr	r1, [pc, #224]	; (80016a0 <HAL_GPIO_Init+0x2b0>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f0:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 8001622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001626:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001646:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 8001650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001654:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_GPIO_Init+0x2bc>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f aeb7 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	58000800 	.word	0x58000800

080016b0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f4:	887a      	ldrh	r2, [r7, #2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	58000400 	.word	0x58000400

08001728 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_PWREx_GetVoltageRange+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	58000400 	.word	0x58000400

08001740 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001750:	d101      	bne.n	8001756 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	58000400 	.word	0x58000400

08001764 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ae:	d101      	bne.n	80017b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001808:	d101      	bne.n	800180e <LL_RCC_HSE_IsReady+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_RCC_HSE_IsReady+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	d101      	bne.n	8001868 <LL_RCC_HSI_IsReady+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_RCC_HSI_IsReady+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d101      	bne.n	80018b2 <LL_RCC_LSE_IsReady+0x18>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_RCC_LSE_IsReady+0x1a>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d101      	bne.n	8001914 <LL_RCC_LSI_IsReady+0x18>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_RCC_LSI_IsReady+0x1a>
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6013      	str	r3, [r2, #0]
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d101      	bne.n	800196c <LL_RCC_MSI_IsReady+0x16>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_RCC_MSI_IsReady+0x18>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b08      	cmp	r3, #8
 8001986:	d101      	bne.n	800198c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a88:	f023 020f 	bic.w	r2, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a94:	4313      	orrs	r3, r2
 8001a96:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b96:	d101      	bne.n	8001b9c <LL_RCC_PLL_IsReady+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_RCC_PLL_IsReady+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d101      	bne.n	8001c18 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c36:	d101      	bne.n	8001c3c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d101      	bne.n	8001c60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c7c:	d101      	bne.n	8001c82 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c9e:	d101      	bne.n	8001ca4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e36f      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc2:	f7ff fea6 	bl	8001a12 <LL_RCC_GetSysClkSource>
 8001cc6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc8:	f7ff ff8f 	bl	8001bea <LL_RCC_PLL_GetMainSource>
 8001ccc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80c4 	beq.w	8001e64 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x3e>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d176      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d173      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e353      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_OscConfig+0x68>
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d16:	e006      	b.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d222      	bcs.n	8001d70 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fda2 	bl	8002878 <RCC_SetFlashLatencyFromMSIRange>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e331      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe2b 	bl	80019c4 <LL_RCC_MSI_SetCalibTrimming>
 8001d6e:	e021      	b.n	8001db4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe12 	bl	80019c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fd67 	bl	8002878 <RCC_SetFlashLatencyFromMSIRange>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e2f6      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001db4:	f000 fce0 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4aa7      	ldr	r2, [pc, #668]	; (8002058 <HAL_RCC_OscConfig+0x3a8>)
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001dbe:	4ba7      	ldr	r3, [pc, #668]	; (800205c <HAL_RCC_OscConfig+0x3ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f876 	bl	8000eb4 <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d047      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	e2e5      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dde:	f7ff fd9e 	bl	800191e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de2:	f7ff f961 	bl	80010a8 <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dea:	f7ff f95d 	bl	80010a8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e2d2      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dfc:	f7ff fdab 	bl	8001956 <LL_RCC_MSI_IsReady>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f1      	beq.n	8001dea <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fdc7 	bl	80019c4 <LL_RCC_MSI_SetCalibTrimming>
 8001e36:	e015      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e38:	f7ff fd7f 	bl	800193a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f934 	bl	80010a8 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e44:	f7ff f930 	bl	80010a8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2a5      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e56:	f7ff fd7e 	bl	8001956 <LL_RCC_MSI_IsReady>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f1      	bne.n	8001e44 <HAL_RCC_OscConfig+0x194>
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e62:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d058      	beq.n	8001f22 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1d2>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d108      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d14b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e289      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x204>
 8001eae:	f7ff fc86 	bl	80017be <LL_RCC_HSE_Enable>
 8001eb2:	e00d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x220>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001ebc:	d104      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x218>
 8001ebe:	f7ff fc51 	bl	8001764 <LL_RCC_HSE_EnableTcxo>
 8001ec2:	f7ff fc7c 	bl	80017be <LL_RCC_HSE_Enable>
 8001ec6:	e003      	b.n	8001ed0 <HAL_RCC_OscConfig+0x220>
 8001ec8:	f7ff fc87 	bl	80017da <LL_RCC_HSE_Disable>
 8001ecc:	f7ff fc58 	bl	8001780 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d012      	beq.n	8001efe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f8e6 	bl	80010a8 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f8e2 	bl	80010a8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e257      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ef2:	f7ff fc80 	bl	80017f6 <LL_RCC_HSE_IsReady>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f1      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x230>
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8d3 	bl	80010a8 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f06:	f7ff f8cf 	bl	80010a8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e244      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f18:	f7ff fc6d 	bl	80017f6 <LL_RCC_HSE_IsReady>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f1      	bne.n	8001f06 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d046      	beq.n	8001fbc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x290>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d10e      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e22a      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc8e 	bl	8001872 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f56:	e031      	b.n	8001fbc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d019      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	f7ff fc5a 	bl	8001818 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f8a0 	bl	80010a8 <HAL_GetTick>
 8001f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f89c 	bl	80010a8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e211      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f7e:	f7ff fc67 	bl	8001850 <LL_RCC_HSI_IsReady>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f1      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc70 	bl	8001872 <LL_RCC_HSI_SetCalibTrimming>
 8001f92:	e013      	b.n	8001fbc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f94:	f7ff fc4e 	bl	8001834 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f886 	bl	80010a8 <HAL_GetTick>
 8001f9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f882 	bl	80010a8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1f7      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001fb2:	f7ff fc4d 	bl	8001850 <LL_RCC_HSI_IsReady>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f1      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d06e      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d056      	beq.n	800207e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d031      	beq.n	800204c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e1d0      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d013      	beq.n	8002032 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800200a:	f7ff fc67 	bl	80018dc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200e:	f7ff f84b 	bl	80010a8 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002016:	f7ff f847 	bl	80010a8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b11      	cmp	r3, #17
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1bc      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002028:	f7ff fc68 	bl	80018fc <LL_RCC_LSI_IsReady>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f1      	bne.n	8002016 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203a:	f023 0210 	bic.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204c:	f7ff fc36 	bl	80018bc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff f82a 	bl	80010a8 <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002056:	e00c      	b.n	8002072 <HAL_RCC_OscConfig+0x3c2>
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000020 	.word	0x20000020
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f822 	bl	80010a8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b11      	cmp	r3, #17
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e197      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002072:	f7ff fc43 	bl	80018fc <LL_RCC_LSI_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f1      	beq.n	8002060 <HAL_RCC_OscConfig+0x3b0>
 800207c:	e013      	b.n	80020a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	f7ff fc2d 	bl	80018dc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff f811 	bl	80010a8 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff f80d 	bl	80010a8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b11      	cmp	r3, #17
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e182      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800209c:	f7ff fc2e 	bl	80018fc <LL_RCC_LSI_IsReady>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80d8 	beq.w	8002264 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020b4:	f7ff fb44 	bl	8001740 <LL_PWR_IsEnabledBkUpAccess>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d113      	bne.n	80020e6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020be:	f7ff fb25 	bl	800170c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fff1 	bl	80010a8 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe ffed 	bl	80010a8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e162      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020dc:	f7ff fb30 	bl	8001740 <LL_PWR_IsEnabledBkUpAccess>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f1      	beq.n	80020ca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d07b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b85      	cmp	r3, #133	; 0x85
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe ffc9 	bl	80010a8 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe ffbb 	bl	80010a8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e12e      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002144:	f7ff fba9 	bl	800189a <LL_RCC_LSE_IsReady>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ef      	beq.n	800212e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b81      	cmp	r3, #129	; 0x81
 8002154:	d003      	beq.n	800215e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b85      	cmp	r3, #133	; 0x85
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe ff95 	bl	80010a8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e108      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ec      	beq.n	800217a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80021a0:	e060      	b.n	8002264 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe ff81 	bl	80010a8 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe ff73 	bl	80010a8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0e6      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ec      	bne.n	80021be <HAL_RCC_OscConfig+0x50e>
 80021e4:	e03e      	b.n	8002264 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe ff5f 	bl	80010a8 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe ff51 	bl	80010a8 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0c4      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ec      	bne.n	8002202 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe ff30 	bl	80010a8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0a3      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800225a:	f7ff fb1e 	bl	800189a <LL_RCC_LSE_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ef      	bne.n	8002244 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8099 	beq.w	80023a0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d06c      	beq.n	800234e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b02      	cmp	r3, #2
 800227a:	d14b      	bne.n	8002314 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	f7ff fc74 	bl	8001b68 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe ff12 	bl	80010a8 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe ff0e 	bl	80010a8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e083      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800229a:	f7ff fc73 	bl	8001b84 <LL_RCC_PLL_IsReady>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f1      	bne.n	8002288 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_RCC_OscConfig+0x6fc>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022bc:	0212      	lsls	r2, r2, #8
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d0:	430a      	orrs	r2, r1
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022da:	f7ff fc37 	bl	8001b4c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fedb 	bl	80010a8 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fed7 	bl	80010a8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b0a      	cmp	r3, #10
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e04c      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002308:	f7ff fc3c 	bl	8001b84 <LL_RCC_PLL_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f1      	beq.n	80022f6 <HAL_RCC_OscConfig+0x646>
 8002312:	e045      	b.n	80023a0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	f7ff fc28 	bl	8001b68 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fec6 	bl	80010a8 <HAL_GetTick>
 800231c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fec2 	bl	80010a8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b0a      	cmp	r3, #10
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e037      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002332:	f7ff fc27 	bl	8001b84 <LL_RCC_PLL_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f1      	bne.n	8002320 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x700>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
 800234c:	e028      	b.n	80023a0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e023      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	429a      	cmp	r2, r3
 800236e:	d115      	bne.n	800239c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	429a      	cmp	r2, r3
 800237c:	d10e      	bne.n	800239c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	429a      	cmp	r2, r3
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	11c1808c 	.word	0x11c1808c
 80023b0:	eefefffc 	.word	0xeefefffc

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e12c      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b98      	ldr	r3, [pc, #608]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d91b      	bls.n	800240e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b95      	ldr	r3, [pc, #596]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4993      	ldr	r1, [pc, #588]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fe5f 	bl	80010a8 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023ee:	f7fe fe5b 	bl	80010a8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e110      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b8a      	ldr	r3, [pc, #552]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fb02 	bl	8001a28 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002424:	f7fe fe40 	bl	80010a8 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800242c:	f7fe fe3c 	bl	80010a8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0f1      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800243e:	f7ff fbdf 	bl	8001c00 <LL_RCC_IsActiveFlag_HPRE>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d016      	beq.n	8002482 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff faf8 	bl	8001a4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800245e:	f7fe fe23 	bl	80010a8 <HAL_GetTick>
 8002462:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002466:	f7fe fe1f 	bl	80010a8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0d4      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002478:	f7ff fbd3 	bl	8001c22 <LL_RCC_IsActiveFlag_C2HPRE>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f1      	beq.n	8002466 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff faf0 	bl	8001a78 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002498:	f7fe fe06 	bl	80010a8 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024a0:	f7fe fe02 	bl	80010a8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0b7      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024b2:	f7ff fbc8 	bl	8001c46 <LL_RCC_IsActiveFlag_SHDHPRE>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f1      	beq.n	80024a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fae9 	bl	8001aa4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024d2:	f7fe fde9 	bl	80010a8 <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024da:	f7fe fde5 	bl	80010a8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09a      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024ec:	f7ff fbbd 	bl	8001c6a <LL_RCC_IsActiveFlag_PPRE1>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d017      	beq.n	8002532 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fade 	bl	8001aca <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800250e:	f7fe fdcb 	bl	80010a8 <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002516:	f7fe fdc7 	bl	80010a8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e07c      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002528:	f7ff fbb0 	bl	8001c8c <LL_RCC_IsActiveFlag_PPRE2>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f1      	beq.n	8002516 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d043      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d106      	bne.n	8002554 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002546:	f7ff f956 	bl	80017f6 <LL_RCC_HSE_IsReady>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11e      	bne.n	800258e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e066      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d106      	bne.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800255c:	f7ff fb12 	bl	8001b84 <LL_RCC_PLL_IsReady>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d113      	bne.n	800258e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e05b      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002572:	f7ff f9f0 	bl	8001956 <LL_RCC_MSI_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e050      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002580:	f7ff f966 	bl	8001850 <LL_RCC_HSI_IsReady>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e049      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fa2a 	bl	80019ec <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fd86 	bl	80010a8 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fd82 	bl	80010a8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e035      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	f7ff fa2c 	bl	8001a12 <LL_RCC_GetSysClkSource>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d1ec      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d21b      	bcs.n	800260c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0207 	bic.w	r2, r3, #7
 80025dc:	4913      	ldr	r1, [pc, #76]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fd60 	bl	80010a8 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025ec:	f7fe fd5c 	bl	80010a8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e011      	b.n	8002622 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x278>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d1ef      	bne.n	80025ec <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800260c:	f000 f8b4 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002610:	4603      	mov	r3, r0
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_RCC_ClockConfig+0x27c>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_RCC_ClockConfig+0x280>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fc4a 	bl	8000eb4 <HAL_InitTick>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58004000 	.word	0x58004000
 8002630:	2000001c 	.word	0x2000001c
 8002634:	20000020 	.word	0x20000020

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	f7ff f9e4 	bl	8001a12 <LL_RCC_GetSysClkSource>
 800264a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	f7ff facd 	bl	8001bea <LL_RCC_PLL_GetMainSource>
 8002650:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d139      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d136      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002664:	f7ff f987 	bl	8001976 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x62>
 800266e:	f7ff f982 	bl	8001976 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002672:	4603      	mov	r3, r0
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x4e>
 8002678:	f7ff f98d 	bl	8001996 <LL_RCC_MSI_GetRange>
 800267c:	4603      	mov	r3, r0
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	e005      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x5a>
 8002686:	f7ff f991 	bl	80019ac <LL_RCC_MSI_GetRangeAfterStandby>
 800268a:	4603      	mov	r3, r0
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	4a36      	ldr	r2, [pc, #216]	; (800276c <HAL_RCC_GetSysClockFreq+0x134>)
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	e014      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x8c>
 800269a:	f7ff f96c 	bl	8001976 <LL_RCC_MSI_IsEnabledRangeSelect>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x7a>
 80026a4:	f7ff f977 	bl	8001996 <LL_RCC_MSI_GetRange>
 80026a8:	4603      	mov	r3, r0
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	e005      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x86>
 80026b2:	f7ff f97b 	bl	80019ac <LL_RCC_MSI_GetRangeAfterStandby>
 80026b6:	4603      	mov	r3, r0
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_RCC_GetSysClockFreq+0x134>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026d0:	e012      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d102      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_GetSysClockFreq+0x138>)
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e00c      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d109      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026e4:	f7ff f85a 	bl	800179c <LL_RCC_HSE_IsEnabledDiv2>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e001      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026f6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	f7ff f98b 	bl	8001a12 <LL_RCC_GetSysClkSource>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d12f      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002702:	f7ff fa72 	bl	8001bea <LL_RCC_PLL_GetMainSource>
 8002706:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0xde>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d003      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0xe4>
 8002714:	e00d      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_GetSysClockFreq+0x138>)
 8002718:	60fb      	str	r3, [r7, #12]
        break;
 800271a:	e00d      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800271c:	f7ff f83e 	bl	800179c <LL_RCC_HSE_IsEnabledDiv2>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_GetSysClockFreq+0x138>)
 8002728:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCC_GetSysClockFreq+0x13c>)
 800272e:	60fb      	str	r3, [r7, #12]
        break;
 8002730:	e002      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	60fb      	str	r3, [r7, #12]
        break;
 8002736:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002738:	f7ff fa35 	bl	8001ba6 <LL_RCC_PLL_GetN>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	fb03 f402 	mul.w	r4, r3, r2
 8002744:	f7ff fa46 	bl	8001bd4 <LL_RCC_PLL_GetDivider>
 8002748:	4603      	mov	r3, r0
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	3301      	adds	r3, #1
 800274e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002752:	f7ff fa34 	bl	8001bbe <LL_RCC_PLL_GetR>
 8002756:	4603      	mov	r3, r0
 8002758:	0f5b      	lsrs	r3, r3, #29
 800275a:	3301      	adds	r3, #1
 800275c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002760:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002762:	697b      	ldr	r3, [r7, #20]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	080080d0 	.word	0x080080d0
 8002770:	00f42400 	.word	0x00f42400
 8002774:	01e84800 	.word	0x01e84800

08002778 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b598      	push	{r3, r4, r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800277c:	f7ff ff5c 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8002780:	4604      	mov	r4, r0
 8002782:	f7ff f9b5 	bl	8001af0 <LL_RCC_GetAHBPrescaler>
 8002786:	4603      	mov	r3, r0
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x24>)
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd98      	pop	{r3, r4, r7, pc}
 800279c:	08008070 	.word	0x08008070

080027a0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b598      	push	{r3, r4, r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027a4:	f7ff ffe8 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027a8:	4604      	mov	r4, r0
 80027aa:	f7ff f9b9 	bl	8001b20 <LL_RCC_GetAPB1Prescaler>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd98      	pop	{r3, r4, r7, pc}
 80027c0:	080080b0 	.word	0x080080b0

080027c4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b598      	push	{r3, r4, r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80027c8:	f7ff ffd6 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027cc:	4604      	mov	r4, r0
 80027ce:	f7ff f9b2 	bl	8001b36 <LL_RCC_GetAPB2Prescaler>
 80027d2:	4603      	mov	r3, r0
 80027d4:	0adb      	lsrs	r3, r3, #11
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd98      	pop	{r3, r4, r7, pc}
 80027e4:	080080b0 	.word	0x080080b0

080027e8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d038      	beq.n	800286a <HAL_RCC_GetClockConfig+0x82>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d035      	beq.n	800286a <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	224f      	movs	r2, #79	; 0x4f
 8002802:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002848:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	b2da      	uxtb	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetClockConfig+0x8c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]
  }
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	58004000 	.word	0x58004000

08002878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002890:	f7ff f939 	bl	8001b06 <LL_RCC_GetAHB3Prescaler>
 8002894:	4603      	mov	r3, r0
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9c      	lsrs	r4, r3, #18
 80028b4:	f7fe ff38 	bl	8001728 <HAL_PWREx_GetVoltageRange>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4620      	mov	r0, r4
 80028be:	f000 f80b 	bl	80028d8 <RCC_SetFlashLatency>
 80028c2:	4603      	mov	r3, r0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	080080d0 	.word	0x080080d0
 80028d0:	08008070 	.word	0x08008070
 80028d4:	431bde83 	.word	0x431bde83

080028d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80028e2:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <RCC_SetFlashLatency+0xf4>)
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ec:	6018      	str	r0, [r3, #0]
 80028ee:	3304      	adds	r3, #4
 80028f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80028f2:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <RCC_SetFlashLatency+0xf8>)
 80028f4:	f107 0318 	add.w	r3, r7, #24
 80028f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028fc:	6018      	str	r0, [r3, #0]
 80028fe:	3304      	adds	r3, #4
 8002900:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002902:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <RCC_SetFlashLatency+0xfc>)
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	ca07      	ldmia	r2, {r0, r1, r2}
 800290a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002918:	d11b      	bne.n	8002952 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800291a:	2300      	movs	r3, #0
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
 800291e:	e014      	b.n	800294a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	3338      	adds	r3, #56	; 0x38
 8002926:	443b      	add	r3, r7
 8002928:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3338      	adds	r3, #56	; 0x38
 800293a:	443b      	add	r3, r7
 800293c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002942:	e021      	b.n	8002988 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	3301      	adds	r3, #1
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2b02      	cmp	r3, #2
 800294e:	d9e7      	bls.n	8002920 <RCC_SetFlashLatency+0x48>
 8002950:	e01a      	b.n	8002988 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002956:	e014      	b.n	8002982 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	443b      	add	r3, r7
 8002960:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002964:	461a      	mov	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4293      	cmp	r3, r2
 800296a:	d807      	bhi.n	800297c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3338      	adds	r3, #56	; 0x38
 8002972:	443b      	add	r3, r7
 8002974:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800297a:	e005      	b.n	8002988 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	3301      	adds	r3, #1
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2b02      	cmp	r3, #2
 8002986:	d9e7      	bls.n	8002958 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <RCC_SetFlashLatency+0x100>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4911      	ldr	r1, [pc, #68]	; (80029d8 <RCC_SetFlashLatency+0x100>)
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002998:	f7fe fb86 	bl	80010a8 <HAL_GetTick>
 800299c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800299e:	e008      	b.n	80029b2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029a0:	f7fe fb82 	bl	80010a8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e007      	b.n	80029c2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <RCC_SetFlashLatency+0x100>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1ef      	bne.n	80029a0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3738      	adds	r7, #56	; 0x38
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	08007fd0 	.word	0x08007fd0
 80029d0:	08007fd8 	.word	0x08007fd8
 80029d4:	08007fe0 	.word	0x08007fe0
 80029d8:	58004000 	.word	0x58004000

080029dc <LL_RCC_LSE_IsReady>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d101      	bne.n	80029f4 <LL_RCC_LSE_IsReady+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_RCC_LSE_IsReady+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_SetUSARTClockSource>:
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_SetI2SClockSource>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_SetLPUARTClockSource>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_SetI2CClockSource>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetLPTIMClockSource>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_SetRNGClockSource>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_SetADCClockSource>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_SetRTCClockSource>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_GetRTCClockSource>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_ForceBackupDomainReset>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d058      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002be4:	f7fe fd92 	bl	800170c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fa5e 	bl	80010a8 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002bee:	e009      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fa5a 	bl	80010a8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	74fb      	strb	r3, [r7, #19]
        break;
 8002c02:	e006      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c04:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d13c      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002c18:	f7ff ffa7 	bl	8002b6a <LL_RCC_GetRTCClockSource>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00f      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c34:	f7ff ffa5 	bl	8002b82 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c38:	f7ff ffb3 	bl	8002ba2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d014      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fa2a 	bl	80010a8 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002c56:	e00b      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fa26 	bl	80010a8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d902      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c6e:	e004      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002c70:	f7ff feb4 	bl	80029dc <LL_RCC_LSE_IsReady>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d1ee      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5b 	bl	8002b40 <LL_RCC_SetRTCClockSource>
 8002c8a:	e004      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
 8002c90:	e001      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fea9 	bl	80029fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fe9e 	bl	80029fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fec0 	bl	8002a58 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fee6 	bl	8002aba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fedb 	bl	8002aba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fed0 	bl	8002aba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fea9 	bl	8002a82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fe9e 	bl	8002a82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fe93 	bl	8002a82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d011      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fe5e 	bl	8002a2e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fea5 	bl	8002aec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fea3 	bl	8002b16 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd8:	d107      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002dea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58000400 	.word	0x58000400

08002df8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e08:	4904      	ldr	r1, [pc, #16]	; (8002e1c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	58000400 	.word	0x58000400

08002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	58000400 	.word	0x58000400

08002e40 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002e4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	58000400 	.word	0x58000400

08002e60 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6a:	619a      	str	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	58000400 	.word	0x58000400

08002e78 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d101      	bne.n	8002e8c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	58000400 	.word	0x58000400

08002e9c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d101      	bne.n	8002eb0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	58000400 	.word	0x58000400

08002ec0 <LL_RCC_RF_DisableReset>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_IsRFUnderReset>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef4:	d101      	bne.n	8002efa <LL_RCC_IsRFUnderReset+0x1a>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_RCC_IsRFUnderReset+0x1c>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <LL_EXTI_EnableIT_32_63+0x24>)
 8002f0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002f12:	4905      	ldr	r1, [pc, #20]	; (8002f28 <LL_EXTI_EnableIT_32_63+0x24>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	58000800 	.word	0x58000800

08002f2c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
    return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	e052      	b.n	8002fe8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	799b      	ldrb	r3, [r3, #6]
 8002f4a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SUBGHZ_Init+0x2c>
 8002f52:	7bbb      	ldrb	r3, [r7, #14]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d109      	bne.n	8002f6c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd ff2f 	bl	8000dc2 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002f64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f68:	f7ff ffcc 	bl	8002f04 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d126      	bne.n	8002fc0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002f78:	f7ff ffa2 	bl	8002ec0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_SUBGHZ_Init+0xc4>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	0cdb      	lsrs	r3, r3, #19
 8002f8a:	2264      	movs	r2, #100	; 0x64
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	609a      	str	r2, [r3, #8]
        break;
 8002fa2:	e007      	b.n	8002fb4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002faa:	f7ff ff99 	bl	8002ee0 <LL_RCC_IsRFUnderReset>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002fb4:	f7ff ff34 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002fb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fbc:	f7ff ff1c 	bl	8002df8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002fc0:	f7ff ff4e 	bl	8002e60 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa4e 	bl	8003470 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	719a      	strb	r2, [r3, #6]

  return status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000001c 	.word	0x2000001c

08002ff4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	461a      	mov	r2, r3
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
 8003004:	4613      	mov	r3, r2
 8003006:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	799b      	ldrb	r3, [r3, #6]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d14a      	bne.n	80030a8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	795b      	ldrb	r3, [r3, #5]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800301a:	2302      	movs	r3, #2
 800301c:	e045      	b.n	80030aa <HAL_SUBGHZ_WriteRegisters+0xb6>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2202      	movs	r2, #2
 8003028:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 faee 	bl	800360c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003030:	f7ff ff06 	bl	8002e40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003034:	210d      	movs	r1, #13
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa3a 	bl	80034b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800303c:	897b      	ldrh	r3, [r7, #10]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa32 	bl	80034b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800304c:	897b      	ldrh	r3, [r7, #10]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa2c 	bl	80034b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	82bb      	strh	r3, [r7, #20]
 800305c:	e00a      	b.n	8003074 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800305e:	8abb      	ldrh	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa21 	bl	80034b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800306e:	8abb      	ldrh	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	82bb      	strh	r3, [r7, #20]
 8003074:	8aba      	ldrh	r2, [r7, #20]
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d3f0      	bcc.n	800305e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800307c:	f7ff fed0 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fae7 	bl	8003654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	e001      	b.n	8003098 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	715a      	strb	r2, [r3, #5]

    return status;
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	e000      	b.n	80030aa <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	461a      	mov	r2, r3
 80030be:	460b      	mov	r3, r1
 80030c0:	72fb      	strb	r3, [r7, #11]
 80030c2:	4613      	mov	r3, r2
 80030c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	799b      	ldrb	r3, [r3, #6]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d14a      	bne.n	8003166 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	795b      	ldrb	r3, [r3, #5]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80030d8:	2302      	movs	r3, #2
 80030da:	e045      	b.n	8003168 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa92 	bl	800360c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	2b84      	cmp	r3, #132	; 0x84
 80030ec:	d002      	beq.n	80030f4 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	2b94      	cmp	r3, #148	; 0x94
 80030f2:	d103      	bne.n	80030fc <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	711a      	strb	r2, [r3, #4]
 80030fa:	e002      	b.n	8003102 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003102:	f7ff fe9d 	bl	8002e40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	4619      	mov	r1, r3
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9d0 	bl	80034b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	82bb      	strh	r3, [r7, #20]
 8003114:	e00a      	b.n	800312c <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003116:	8abb      	ldrh	r3, [r7, #20]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4619      	mov	r1, r3
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f9c5 	bl	80034b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003126:	8abb      	ldrh	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	82bb      	strh	r3, [r7, #20]
 800312c:	8aba      	ldrh	r2, [r7, #20]
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3f0      	bcc.n	8003116 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003134:	f7ff fe74 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	2b84      	cmp	r3, #132	; 0x84
 800313c:	d002      	beq.n	8003144 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa88 	bl	8003654 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
 8003150:	e001      	b.n	8003156 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	715a      	strb	r2, [r3, #5]

    return status;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	e000      	b.n	8003168 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	460b      	mov	r3, r1
 800317e:	72fb      	strb	r3, [r7, #11]
 8003180:	4613      	mov	r3, r2
 8003182:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	799b      	ldrb	r3, [r3, #6]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d13d      	bne.n	800320e <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	795b      	ldrb	r3, [r3, #5]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800319a:	2302      	movs	r3, #2
 800319c:	e038      	b.n	8003210 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa31 	bl	800360c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80031aa:	f7ff fe49 	bl	8002e40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	4619      	mov	r1, r3
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f97c 	bl	80034b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80031b8:	2100      	movs	r1, #0
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f978 	bl	80034b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	82fb      	strh	r3, [r7, #22]
 80031c4:	e009      	b.n	80031da <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80031c6:	69b9      	ldr	r1, [r7, #24]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f9c7 	bl	800355c <SUBGHZSPI_Receive>
      pData++;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80031d4:	8afb      	ldrh	r3, [r7, #22]
 80031d6:	3301      	adds	r3, #1
 80031d8:	82fb      	strh	r3, [r7, #22]
 80031da:	8afa      	ldrh	r2, [r7, #22]
 80031dc:	893b      	ldrh	r3, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3f1      	bcc.n	80031c6 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80031e2:	f7ff fe1d 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fa34 	bl	8003654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e001      	b.n	80031fe <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	715a      	strb	r2, [r3, #5]

    return status;
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	e000      	b.n	8003210 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	72fb      	strb	r3, [r7, #11]
 8003228:	4613      	mov	r3, r2
 800322a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	799b      	ldrb	r3, [r3, #6]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d13e      	bne.n	80032b4 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	795b      	ldrb	r3, [r3, #5]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800323e:	2302      	movs	r3, #2
 8003240:	e039      	b.n	80032b6 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f9df 	bl	800360c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800324e:	f7ff fdf7 	bl	8002e40 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003252:	210e      	movs	r1, #14
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f92b 	bl	80034b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f926 	bl	80034b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	82bb      	strh	r3, [r7, #20]
 8003268:	e00a      	b.n	8003280 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800326a:	8abb      	ldrh	r3, [r7, #20]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f91b 	bl	80034b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800327a:	8abb      	ldrh	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	82bb      	strh	r3, [r7, #20]
 8003280:	8aba      	ldrh	r2, [r7, #20]
 8003282:	893b      	ldrh	r3, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3f0      	bcc.n	800326a <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003288:	f7ff fdca 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9e1 	bl	8003654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
 800329e:	e001      	b.n	80032a4 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	715a      	strb	r2, [r3, #5]

    return status;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	e000      	b.n	80032b6 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80032c6:	2300      	movs	r3, #0
 80032c8:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	2302      	movs	r3, #2
 80032d0:	2112      	movs	r1, #18
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff4c 	bl	8003170 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80032d8:	7b3b      	ldrb	r3, [r7, #12]
 80032da:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b21a      	sxth	r2, r3
 80032e2:	7b7b      	ldrb	r3, [r7, #13]
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80032ec:	f107 020c 	add.w	r2, r7, #12
 80032f0:	2302      	movs	r3, #2
 80032f2:	2102      	movs	r1, #2
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fedc 	bl	80030b2 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f857 	bl	80033b8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f858 	bl	80033ca <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f859 	bl	80033dc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800332a:	89fb      	ldrh	r3, [r7, #14]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f85a 	bl	80033ee <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f85b 	bl	8003400 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f85c 	bl	8003412 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800335a:	89fb      	ldrh	r3, [r7, #14]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f85d 	bl	8003424 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800337e:	2101      	movs	r1, #1
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f858 	bl	8003436 <HAL_SUBGHZ_CADStatusCallback>
 8003386:	e003      	b.n	8003390 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003388:	2100      	movs	r1, #0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f853 	bl	8003436 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003390:	89fb      	ldrh	r3, [r7, #14]
 8003392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f856 	bl	800344c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f857 	bl	800345e <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_SUBGHZ_TxCpltCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_TxCpltCallback should be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <HAL_SUBGHZ_RxCpltCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_RxCpltCallback should be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_SUBGHZ_PreambleDetectedCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_PreambleDetectedCallback should be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_SUBGHZ_SyncWordValidCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_SyncWordValidCallback should be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_SUBGHZ_HeaderValidCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_HeaderValidCallback should be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_SUBGHZ_HeaderErrorCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_HeaderErrorCallback should be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_SUBGHZ_CRCErrorCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_CRCErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_CRCErrorCallback should be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_SUBGHZ_CADStatusCallback>:
  * @param  cadstatus reports whether activity is detected or not
  * @retval None
  */
__weak void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz,
                                         HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	70fb      	strb	r3, [r7, #3]

  UNUSED(cadstatus);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_CADStatusCallback should be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_SUBGHZ_RxTxTimeoutCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_RxTxTimeoutCallback should be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_SUBGHZ_LrFhssHopCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_LrFhssHopCallback should be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 800347e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003482:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003484:	4a09      	ldr	r2, [pc, #36]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800348c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 8003490:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003494:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a04      	ldr	r2, [pc, #16]	; (80034ac <SUBGHZSPI_Init+0x3c>)
 800349c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a0:	6013      	str	r3, [r2, #0]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	58010000 	.word	0x58010000

080034b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <SUBGHZSPI_Transmit+0xa0>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	0cdb      	lsrs	r3, r3, #19
 80034ce:	2264      	movs	r2, #100	; 0x64
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	609a      	str	r2, [r3, #8]
      break;
 80034e6:	e008      	b.n	80034fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <SUBGHZSPI_Transmit+0xa4>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d1ed      	bne.n	80034d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <SUBGHZSPI_Transmit+0xa8>)
 80034fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <SUBGHZSPI_Transmit+0xa0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	0cdb      	lsrs	r3, r3, #19
 8003512:	2264      	movs	r2, #100	; 0x64
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	609a      	str	r2, [r3, #8]
      break;
 800352a:	e008      	b.n	800353e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3b01      	subs	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <SUBGHZSPI_Transmit+0xa4>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d1ed      	bne.n	800351a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <SUBGHZSPI_Transmit+0xa4>)
 8003540:	68db      	ldr	r3, [r3, #12]

  return status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	2000001c 	.word	0x2000001c
 8003554:	58010000 	.word	0x58010000
 8003558:	5801000c 	.word	0x5801000c

0800355c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <SUBGHZSPI_Receive+0xa4>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	0cdb      	lsrs	r3, r3, #19
 8003578:	2264      	movs	r2, #100	; 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	609a      	str	r2, [r3, #8]
      break;
 8003590:	e008      	b.n	80035a4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <SUBGHZSPI_Receive+0xa8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d1ed      	bne.n	8003580 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <SUBGHZSPI_Receive+0xac>)
 80035a6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <SUBGHZSPI_Receive+0xa4>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	0cdb      	lsrs	r3, r3, #19
 80035bc:	2264      	movs	r2, #100	; 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	609a      	str	r2, [r3, #8]
      break;
 80035d4:	e008      	b.n	80035e8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <SUBGHZSPI_Receive+0xa8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d1ed      	bne.n	80035c4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <SUBGHZSPI_Receive+0xa8>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	701a      	strb	r2, [r3, #0]

  return status;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	2000001c 	.word	0x2000001c
 8003604:	58010000 	.word	0x58010000
 8003608:	5801000c 	.word	0x5801000c

0800360c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	791b      	ldrb	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d111      	bne.n	8003640 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <SUBGHZ_CheckDeviceReady+0x44>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800362c:	f7ff fc08 	bl	8002e40 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3b01      	subs	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f9      	bne.n	8003630 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800363c:	f7ff fbf0 	bl	8002e20 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f807 	bl	8003654 <SUBGHZ_WaitOnBusy>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000001c 	.word	0x2000001c

08003654 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <SUBGHZ_WaitOnBusy+0x58>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	0d1b      	lsrs	r3, r3, #20
 800366e:	2264      	movs	r2, #100	; 0x64
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003676:	f7ff fc11 	bl	8002e9c <LL_PWR_IsActiveFlag_RFBUSYMS>
 800367a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e009      	b.n	80036a2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3b01      	subs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003694:	f7ff fbf0 	bl	8002e78 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d0e9      	beq.n	8003676 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	2000001c 	.word	0x2000001c

080036b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e049      	b.n	8003756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f841 	bl	800375e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 f9ce 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e036      	b.n	80037f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIM_Base_Start_IT+0x90>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x44>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d115      	bne.n	80037e0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_TIM_Base_Start_IT+0x94>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d015      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x82>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d011      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e008      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	00010007 	.word	0x00010007

08003808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0202 	mvn.w	r2, #2
 8003834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f904 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8f7 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f906 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0204 	mvn.w	r2, #4
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8da 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8cd 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f8dc 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d122      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0208 	mvn.w	r2, #8
 80038dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8b0 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e005      	b.n	8003906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8a3 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8b2 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b10      	cmp	r3, #16
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0210 	mvn.w	r2, #16
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2208      	movs	r2, #8
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f886 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f879 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f888 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fc ff62 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8d7 	bl	8003b66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8c9 	bl	8003b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f835 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0220 	mvn.w	r2, #32
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f88b 	bl	8003b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
	...

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0x20>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d108      	bne.n	8003ac2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_Base_SetConfig+0x52>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d007      	beq.n	8003ae2 <TIM_Base_SetConfig+0x52>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <TIM_Base_SetConfig+0xbc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0x52>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <TIM_Base_SetConfig+0xc0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d108      	bne.n	8003af4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_Base_SetConfig+0xa0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <TIM_Base_SetConfig+0xbc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_Base_SetConfig+0xa0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <TIM_Base_SetConfig+0xc0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d103      	bne.n	8003b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_GetUSARTClockSource>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	4313      	orrs	r3, r2
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_GetLPUARTClockSource>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4013      	ands	r3, r2
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e042      	b.n	8003c64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd f8f9 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2224      	movs	r2, #36	; 0x24
 8003bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb6e 	bl	80042f0 <UART_SetConfig>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e022      	b.n	8003c64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fdd6 	bl	80047d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fe5c 	bl	800491a <UART_CheckIdleState>
 8003c62:	4603      	mov	r3, r0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b0ba      	sub	sp, #232	; 0xe8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c96:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 82e3 	beq.w	800429c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
      }
      return;
 8003cde:	e2dd      	b.n	800429c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8123 	beq.w	8003f30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003cee:	4b8d      	ldr	r3, [pc, #564]	; (8003f24 <HAL_UART_IRQHandler+0x2b8>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cfa:	4b8b      	ldr	r3, [pc, #556]	; (8003f28 <HAL_UART_IRQHandler+0x2bc>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8116 	beq.w	8003f30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <HAL_UART_IRQHandler+0xc8>
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d011      	beq.n	8003d64 <HAL_UART_IRQHandler+0xf8>
 8003d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00b      	beq.n	8003d64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2202      	movs	r2, #2
 8003d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d011      	beq.n	8003d94 <HAL_UART_IRQHandler+0x128>
 8003d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2204      	movs	r2, #4
 8003d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d017      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003db0:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <HAL_UART_IRQHandler+0x2b8>)
 8003db2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f043 0208 	orr.w	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d012      	beq.n	8003e02 <HAL_UART_IRQHandler+0x196>
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00c      	beq.n	8003e02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8249 	beq.w	80042a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d013      	beq.n	8003e42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d005      	beq.n	8003e66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d054      	beq.n	8003f10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fe6d 	bl	8004b46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d146      	bne.n	8003f08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1d9      	bne.n	8003e7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d017      	beq.n	8003f00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_UART_IRQHandler+0x2c0>)
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd fa26 	bl	8001332 <HAL_DMA_Abort_IT>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003efa:	4610      	mov	r0, r2
 8003efc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efe:	e00f      	b.n	8003f20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f9e0 	bl	80042c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f06:	e00b      	b.n	8003f20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f9dc 	bl	80042c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0e:	e007      	b.n	8003f20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9d8 	bl	80042c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003f1e:	e1bf      	b.n	80042a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	bf00      	nop
    return;
 8003f22:	e1bd      	b.n	80042a0 <HAL_UART_IRQHandler+0x634>
 8003f24:	10000001 	.word	0x10000001
 8003f28:	04000120 	.word	0x04000120
 8003f2c:	08004c11 	.word	0x08004c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 8153 	bne.w	80041e0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 814c 	beq.w	80041e0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8145 	beq.w	80041e0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	f040 80bb 	bne.w	80040e4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 818f 	beq.w	80042a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f080 8187 	bcs.w	80042a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 8087 	bne.w	80040c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fe2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1da      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800400e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004022:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004026:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800402a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e1      	bne.n	8003ffe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800405e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004060:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004064:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800406c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800408e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004090:	f023 0310 	bic.w	r3, r3, #16
 8004094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e4      	bne.n	8004080 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd f8da 	bl	8001276 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8fb 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040e2:	e0df      	b.n	80042a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80d1 	beq.w	80042a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80cc 	beq.w	80042a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
 8004134:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e4      	bne.n	8004110 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	623b      	str	r3, [r7, #32]
   return(result);
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800416e:	633a      	str	r2, [r7, #48]	; 0x30
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e1      	bne.n	8004146 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0310 	bic.w	r3, r3, #16
 80041aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	617b      	str	r3, [r7, #20]
   return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e4      	bne.n	8004196 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f87d 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041de:	e063      	b.n	80042a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_UART_IRQHandler+0x59e>
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd45 	bl	8004c92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004208:	e051      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d014      	beq.n	8004240 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03a      	beq.n	80042ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
    }
    return;
 800423e:	e035      	b.n	80042ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_UART_IRQHandler+0x5f4>
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fcef 	bl	8004c3c <UART_EndTransmit_IT>
    return;
 800425e:	e026      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_UART_IRQHandler+0x614>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fd1c 	bl	8004cb6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800427e:	e016      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_UART_IRQHandler+0x642>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	2b00      	cmp	r3, #0
 8004292:	da0c      	bge.n	80042ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fd05 	bl	8004ca4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800429a:	e008      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
      return;
 800429c:	bf00      	nop
 800429e:	e006      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
    return;
 80042a0:	bf00      	nop
 80042a2:	e004      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
      return;
 80042a4:	bf00      	nop
 80042a6:	e002      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
      return;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_UART_IRQHandler+0x642>
    return;
 80042ac:	bf00      	nop
  }
}
 80042ae:	37e8      	adds	r7, #232	; 0xe8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
	...

080042f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	431a      	orrs	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	431a      	orrs	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4313      	orrs	r3, r2
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b94      	ldr	r3, [pc, #592]	; (8004570 <UART_SetConfig+0x280>)
 8004320:	4013      	ands	r3, r2
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004328:	430b      	orrs	r3, r1
 800432a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a89      	ldr	r2, [pc, #548]	; (8004574 <UART_SetConfig+0x284>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004358:	4313      	orrs	r3, r2
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004366:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004370:	430b      	orrs	r3, r1
 8004372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	f023 010f 	bic.w	r1, r3, #15
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7a      	ldr	r2, [pc, #488]	; (8004578 <UART_SetConfig+0x288>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d127      	bne.n	80043e4 <UART_SetConfig+0xf4>
 8004394:	2003      	movs	r0, #3
 8004396:	f7ff fbf8 	bl	8003b8a <LL_RCC_GetUSARTClockSource>
 800439a:	4603      	mov	r3, r0
 800439c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d81b      	bhi.n	80043dc <UART_SetConfig+0xec>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0xbc>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043c2:	e080      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ca:	e07c      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d2:	e078      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043da:	e074      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e2:	e070      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a64      	ldr	r2, [pc, #400]	; (800457c <UART_SetConfig+0x28c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d138      	bne.n	8004460 <UART_SetConfig+0x170>
 80043ee:	200c      	movs	r0, #12
 80043f0:	f7ff fbcb 	bl	8003b8a <LL_RCC_GetUSARTClockSource>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d82c      	bhi.n	8004458 <UART_SetConfig+0x168>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x114>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004439 	.word	0x08004439
 8004408:	08004459 	.word	0x08004459
 800440c:	08004459 	.word	0x08004459
 8004410:	08004459 	.word	0x08004459
 8004414:	08004449 	.word	0x08004449
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
 8004424:	08004441 	.word	0x08004441
 8004428:	08004459 	.word	0x08004459
 800442c:	08004459 	.word	0x08004459
 8004430:	08004459 	.word	0x08004459
 8004434:	08004451 	.word	0x08004451
 8004438:	2300      	movs	r3, #0
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443e:	e042      	b.n	80044c6 <UART_SetConfig+0x1d6>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004446:	e03e      	b.n	80044c6 <UART_SetConfig+0x1d6>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444e:	e03a      	b.n	80044c6 <UART_SetConfig+0x1d6>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	e036      	b.n	80044c6 <UART_SetConfig+0x1d6>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445e:	e032      	b.n	80044c6 <UART_SetConfig+0x1d6>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a43      	ldr	r2, [pc, #268]	; (8004574 <UART_SetConfig+0x284>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d12a      	bne.n	80044c0 <UART_SetConfig+0x1d0>
 800446a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800446e:	f7ff fb9e 	bl	8003bae <LL_RCC_GetLPUARTClockSource>
 8004472:	4603      	mov	r3, r0
 8004474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004478:	d01a      	beq.n	80044b0 <UART_SetConfig+0x1c0>
 800447a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800447e:	d81b      	bhi.n	80044b8 <UART_SetConfig+0x1c8>
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d00c      	beq.n	80044a0 <UART_SetConfig+0x1b0>
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448a:	d815      	bhi.n	80044b8 <UART_SetConfig+0x1c8>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <UART_SetConfig+0x1a8>
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d008      	beq.n	80044a8 <UART_SetConfig+0x1b8>
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x1c8>
 8004498:	2300      	movs	r3, #0
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e012      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a6:	e00e      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ae:	e00a      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b6:	e006      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044be:	e002      	b.n	80044c6 <UART_SetConfig+0x1d6>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <UART_SetConfig+0x284>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	f040 80a4 	bne.w	800461a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d823      	bhi.n	8004522 <UART_SetConfig+0x232>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x1f0>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004523 	.word	0x08004523
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004513 	.word	0x08004513
 80044f4:	08004523 	.word	0x08004523
 80044f8:	08004523 	.word	0x08004523
 80044fc:	08004523 	.word	0x08004523
 8004500:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe f94c 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800450a:	e010      	b.n	800452e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <UART_SetConfig+0x290>)
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004510:	e00d      	b.n	800452e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004512:	f7fe f891 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004518:	e009      	b.n	800452e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004520:	e005      	b.n	800452e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800452c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8137 	beq.w	80047a4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	4a12      	ldr	r2, [pc, #72]	; (8004584 <UART_SetConfig+0x294>)
 800453c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004540:	461a      	mov	r2, r3
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	fbb3 f3f2 	udiv	r3, r3, r2
 8004548:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	429a      	cmp	r2, r3
 8004558:	d305      	bcc.n	8004566 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	429a      	cmp	r2, r3
 8004564:	d910      	bls.n	8004588 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800456c:	e11a      	b.n	80047a4 <UART_SetConfig+0x4b4>
 800456e:	bf00      	nop
 8004570:	cfff69f3 	.word	0xcfff69f3
 8004574:	40008000 	.word	0x40008000
 8004578:	40013800 	.word	0x40013800
 800457c:	40004400 	.word	0x40004400
 8004580:	00f42400 	.word	0x00f42400
 8004584:	08008110 	.word	0x08008110
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2200      	movs	r2, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	60fa      	str	r2, [r7, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4a8e      	ldr	r2, [pc, #568]	; (80047d0 <UART_SetConfig+0x4e0>)
 8004596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459a:	b29b      	uxth	r3, r3
 800459c:	2200      	movs	r2, #0
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	607a      	str	r2, [r7, #4]
 80045a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045aa:	f7fb fde9 	bl	8000180 <__aeabi_uldivmod>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	020b      	lsls	r3, r1, #8
 80045c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045c4:	0202      	lsls	r2, r0, #8
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	6849      	ldr	r1, [r1, #4]
 80045ca:	0849      	lsrs	r1, r1, #1
 80045cc:	2000      	movs	r0, #0
 80045ce:	460c      	mov	r4, r1
 80045d0:	4605      	mov	r5, r0
 80045d2:	eb12 0804 	adds.w	r8, r2, r4
 80045d6:	eb43 0905 	adc.w	r9, r3, r5
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	469a      	mov	sl, r3
 80045e2:	4693      	mov	fp, r2
 80045e4:	4652      	mov	r2, sl
 80045e6:	465b      	mov	r3, fp
 80045e8:	4640      	mov	r0, r8
 80045ea:	4649      	mov	r1, r9
 80045ec:	f7fb fdc8 	bl	8000180 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4613      	mov	r3, r2
 80045f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fe:	d308      	bcc.n	8004612 <UART_SetConfig+0x322>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004606:	d204      	bcs.n	8004612 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	e0c8      	b.n	80047a4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004618:	e0c4      	b.n	80047a4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d167      	bne.n	80046f4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004628:	2b08      	cmp	r3, #8
 800462a:	d828      	bhi.n	800467e <UART_SetConfig+0x38e>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x344>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	0800467f 	.word	0x0800467f
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800467f 	.word	0x0800467f
 800464c:	0800467f 	.word	0x0800467f
 8004650:	0800467f 	.word	0x0800467f
 8004654:	08004677 	.word	0x08004677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fe f8a2 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800465c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800465e:	e014      	b.n	800468a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7fe f8b0 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004666:	e010      	b.n	800468a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4b5a      	ldr	r3, [pc, #360]	; (80047d4 <UART_SetConfig+0x4e4>)
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800466c:	e00d      	b.n	800468a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7fd ffe3 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004674:	e009      	b.n	800468a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800467c:	e005      	b.n	800468a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8089 	beq.w	80047a4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	4a4e      	ldr	r2, [pc, #312]	; (80047d0 <UART_SetConfig+0x4e0>)
 8004698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469c:	461a      	mov	r2, r3
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a4:	005a      	lsls	r2, r3, #1
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	441a      	add	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d916      	bls.n	80046ec <UART_SetConfig+0x3fc>
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d212      	bcs.n	80046ec <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f023 030f 	bic.w	r3, r3, #15
 80046ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	b29a      	uxth	r2, r3
 80046dc:	8bfb      	ldrh	r3, [r7, #30]
 80046de:	4313      	orrs	r3, r2
 80046e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	8bfa      	ldrh	r2, [r7, #30]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e05b      	b.n	80047a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046f2:	e057      	b.n	80047a4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d828      	bhi.n	800474e <UART_SetConfig+0x45e>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0x414>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	0800474f 	.word	0x0800474f
 8004714:	0800473f 	.word	0x0800473f
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800474f 	.word	0x0800474f
 8004720:	0800474f 	.word	0x0800474f
 8004724:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe f83a 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800472c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472e:	e014      	b.n	800475a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7fe f848 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004736:	e010      	b.n	800475a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <UART_SetConfig+0x4e4>)
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800473c:	e00d      	b.n	800475a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7fd ff7b 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004744:	e009      	b.n	800475a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800474c:	e005      	b.n	800475a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004758:	bf00      	nop
    }

    if (pclk != 0U)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d021      	beq.n	80047a4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <UART_SetConfig+0x4e0>)
 8004766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800476a:	461a      	mov	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	441a      	add	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d909      	bls.n	800479e <UART_SetConfig+0x4ae>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d205      	bcs.n	800479e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b29a      	uxth	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60da      	str	r2, [r3, #12]
 800479c:	e002      	b.n	80047a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80047c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3730      	adds	r7, #48	; 0x30
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	08008110 	.word	0x08008110
 80047d4:	00f42400 	.word	0x00f42400

080047d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01a      	beq.n	80048ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d6:	d10a      	bne.n	80048ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af02      	add	r7, sp, #8
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800492a:	f7fc fbbd 	bl	80010a8 <HAL_GetTick>
 800492e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d10e      	bne.n	800495c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f832 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e028      	b.n	80049ae <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d10e      	bne.n	8004988 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800496a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f81c 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e012      	b.n	80049ae <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b09c      	sub	sp, #112	; 0x70
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	e0a9      	b.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	f000 80a5 	beq.w	8004b1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fc fb69 	bl	80010a8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d140      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049fc:	667b      	str	r3, [r7, #100]	; 0x64
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e6      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3308      	adds	r3, #8
 8004a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e069      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d051      	beq.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d149      	bne.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ae4:	623a      	str	r2, [r7, #32]
 8004ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e010      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	f43f af46 	beq.w	80049c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3770      	adds	r7, #112	; 0x70
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b095      	sub	sp, #84	; 0x54
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d118      	bne.n	8004bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 0310 	bic.w	r3, r3, #16
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	613b      	str	r3, [r7, #16]
   return(result);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c06:	bf00      	nop
 8004c08:	3754      	adds	r7, #84	; 0x54
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fb49 	bl	80042c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6979      	ldr	r1, [r7, #20]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e6      	bne.n	8004c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fb15 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8a:	bf00      	nop
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_UARTEx_DisableFifoMode+0x16>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e027      	b.n	8004d2e <HAL_UARTEx_DisableFifoMode+0x66>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	; 0x24
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e02d      	b.n	8004dac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	; 0x24
 8004d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f84f 	bl	8004e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e02d      	b.n	8004e28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	; 0x24
 8004dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f811 	bl	8004e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d108      	bne.n	8004e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e50:	e031      	b.n	8004eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e52:	2308      	movs	r3, #8
 8004e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e56:	2308      	movs	r3, #8
 8004e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	0e5b      	lsrs	r3, r3, #25
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	0f5b      	lsrs	r3, r3, #29
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	7b3a      	ldrb	r2, [r7, #12]
 8004e7e:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <UARTEx_SetNbDataToProcess+0x90>)
 8004e80:	5c8a      	ldrb	r2, [r1, r2]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e86:	7b3a      	ldrb	r2, [r7, #12]
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8004e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	7b7a      	ldrb	r2, [r7, #13]
 8004e9c:	4908      	ldr	r1, [pc, #32]	; (8004ec0 <UARTEx_SetNbDataToProcess+0x90>)
 8004e9e:	5c8a      	ldrb	r2, [r1, r2]
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ea4:	7b7a      	ldrb	r2, [r7, #13]
 8004ea6:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8004ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	08008128 	.word	0x08008128
 8004ec4:	08008130 	.word	0x08008130

08004ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eda:	f3ef 8305 	mrs	r3, IPSR
 8004ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eea:	607b      	str	r3, [r7, #4]
  return(result);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <osKernelInitialize+0x3a>
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <osKernelInitialize+0x60>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d103      	bne.n	8004f0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f06:	f06f 0305 	mvn.w	r3, #5
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e00c      	b.n	8004f28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <osKernelInitialize+0x60>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <osKernelInitialize+0x60>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e002      	b.n	8004f28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	200001a0 	.word	0x200001a0

08004f38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3e:	f3ef 8305 	mrs	r3, IPSR
 8004f42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4e:	607b      	str	r3, [r7, #4]
  return(result);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f56:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <osKernelStart+0x3a>
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <osKernelStart+0x68>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d103      	bne.n	8004f72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f6a:	f06f 0305 	mvn.w	r3, #5
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e010      	b.n	8004f94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <osKernelStart+0x68>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d109      	bne.n	8004f8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f7a:	f7ff ffa5 	bl	8004ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <osKernelStart+0x68>)
 8004f80:	2202      	movs	r2, #2
 8004f82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f84:	f001 fac2 	bl	800650c <vTaskStartScheduler>
      stat = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e002      	b.n	8004f94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200001a0 	.word	0x200001a0

08004fa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb4:	f3ef 8305 	mrs	r3, IPSR
 8004fb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 808f 	bne.w	80050e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fce:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd2:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <osThreadNew+0x3e>
 8004fda:	4b44      	ldr	r3, [pc, #272]	; (80050ec <osThreadNew+0x148>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d07e      	beq.n	80050e0 <osThreadNew+0x13c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07b      	beq.n	80050e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004fec:	2318      	movs	r3, #24
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d045      	beq.n	800508c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <osThreadNew+0x6a>
        name = attr->name;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <osThreadNew+0x90>
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	2b38      	cmp	r3, #56	; 0x38
 8005026:	d805      	bhi.n	8005034 <osThreadNew+0x90>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <osThreadNew+0x94>
        return (NULL);
 8005034:	2300      	movs	r3, #0
 8005036:	e054      	b.n	80050e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <osThreadNew+0xca>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2ba7      	cmp	r3, #167	; 0xa7
 8005056:	d90a      	bls.n	800506e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <osThreadNew+0xca>
        mem = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	e010      	b.n	8005090 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <osThreadNew+0xec>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <osThreadNew+0xec>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <osThreadNew+0xec>
          mem = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	e001      	b.n	8005090 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d110      	bne.n	80050b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800509e:	9202      	str	r2, [sp, #8]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f001 f841 	bl	8006134 <xTaskCreateStatic>
 80050b2:	4603      	mov	r3, r0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e013      	b.n	80050e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d110      	bne.n	80050e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	f107 0310 	add.w	r3, r7, #16
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f001 f88c 	bl	80061ee <xTaskCreate>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d001      	beq.n	80050e0 <osThreadNew+0x13c>
          hTask = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050e0:	693b      	ldr	r3, [r7, #16]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3730      	adds	r7, #48	; 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200001a0 	.word	0x200001a0

080050f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f8:	f3ef 8305 	mrs	r3, IPSR
 80050fc:	613b      	str	r3, [r7, #16]
  return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005104:	f3ef 8310 	mrs	r3, PRIMASK
 8005108:	60fb      	str	r3, [r7, #12]
  return(result);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005110:	f3ef 8311 	mrs	r3, BASEPRI
 8005114:	60bb      	str	r3, [r7, #8]
  return(result);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <osDelay+0x3c>
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <osDelay+0x58>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d103      	bne.n	800512c <osDelay+0x3c>
    stat = osErrorISR;
 8005124:	f06f 0305 	mvn.w	r3, #5
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e007      	b.n	800513c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 f9b4 	bl	80064a4 <vTaskDelay>
    }
  }

  return (stat);
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200001a0 	.word	0x200001a0

0800514c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08c      	sub	sp, #48	; 0x30
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515c:	f3ef 8305 	mrs	r3, IPSR
 8005160:	61bb      	str	r3, [r7, #24]
  return(result);
 8005162:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005164:	2b00      	cmp	r3, #0
 8005166:	d16f      	bne.n	8005248 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005168:	f3ef 8310 	mrs	r3, PRIMASK
 800516c:	617b      	str	r3, [r7, #20]
  return(result);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005174:	f3ef 8311 	mrs	r3, BASEPRI
 8005178:	613b      	str	r3, [r7, #16]
  return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <osMessageQueueNew+0x3c>
 8005180:	4b34      	ldr	r3, [pc, #208]	; (8005254 <osMessageQueueNew+0x108>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d05f      	beq.n	8005248 <osMessageQueueNew+0xfc>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d05c      	beq.n	8005248 <osMessageQueueNew+0xfc>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d059      	beq.n	8005248 <osMessageQueueNew+0xfc>
    mem = -1;
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d029      	beq.n	80051f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d012      	beq.n	80051ce <osMessageQueueNew+0x82>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b4f      	cmp	r3, #79	; 0x4f
 80051ae:	d90e      	bls.n	80051ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <osMessageQueueNew+0x82>
        mem = 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	e014      	b.n	80051f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d110      	bne.n	80051f8 <osMessageQueueNew+0xac>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10c      	bne.n	80051f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <osMessageQueueNew+0xac>
          mem = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e001      	b.n	80051f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10b      	bne.n	8005216 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2100      	movs	r1, #0
 8005208:	9100      	str	r1, [sp, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fa53 	bl	80056b8 <xQueueGenericCreateStatic>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24
 8005214:	e008      	b.n	8005228 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800521c:	2200      	movs	r2, #0
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fac1 	bl	80057a8 <xQueueGenericCreate>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e001      	b.n	8005240 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005244:	f000 ff1a 	bl	800607c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	; 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200001a0 	.word	0x200001a0

08005258 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005270:	f3ef 8305 	mrs	r3, IPSR
 8005274:	61fb      	str	r3, [r7, #28]
  return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527c:	f3ef 8310 	mrs	r3, PRIMASK
 8005280:	61bb      	str	r3, [r7, #24]
  return(result);
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005288:	f3ef 8311 	mrs	r3, BASEPRI
 800528c:	617b      	str	r3, [r7, #20]
  return(result);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d02c      	beq.n	80052ee <osMessageQueuePut+0x96>
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <osMessageQueuePut+0xe0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d128      	bne.n	80052ee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <osMessageQueuePut+0x56>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <osMessageQueuePut+0x56>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80052ae:	f06f 0303 	mvn.w	r3, #3
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052b4:	e039      	b.n	800532a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80052ba:	f107 0210 	add.w	r2, r7, #16
 80052be:	2300      	movs	r3, #0
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	6a38      	ldr	r0, [r7, #32]
 80052c4:	f000 fbd2 	bl	8005a6c <xQueueGenericSendFromISR>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d003      	beq.n	80052d6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80052ce:	f06f 0302 	mvn.w	r3, #2
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052d4:	e029      	b.n	800532a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d026      	beq.n	800532a <osMessageQueuePut+0xd2>
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <osMessageQueuePut+0xe4>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052ec:	e01d      	b.n	800532a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <osMessageQueuePut+0xa2>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80052fa:	f06f 0303 	mvn.w	r3, #3
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	e014      	b.n	800532c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005302:	2300      	movs	r3, #0
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	6a38      	ldr	r0, [r7, #32]
 800530a:	f000 fab1 	bl	8005870 <xQueueGenericSend>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d00b      	beq.n	800532c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800531a:	f06f 0301 	mvn.w	r3, #1
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
 8005320:	e004      	b.n	800532c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005322:	f06f 0302 	mvn.w	r3, #2
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	e000      	b.n	800532c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800532a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200001a0 	.word	0x200001a0
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005356:	f3ef 8305 	mrs	r3, IPSR
 800535a:	61fb      	str	r3, [r7, #28]
  return(result);
 800535c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8310 	mrs	r3, PRIMASK
 8005366:	61bb      	str	r3, [r7, #24]
  return(result);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d105      	bne.n	800537a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800536e:	f3ef 8311 	mrs	r3, BASEPRI
 8005372:	617b      	str	r3, [r7, #20]
  return(result);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d02c      	beq.n	80053d4 <osMessageQueueGet+0x94>
 800537a:	4b28      	ldr	r3, [pc, #160]	; (800541c <osMessageQueueGet+0xdc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d128      	bne.n	80053d4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <osMessageQueueGet+0x54>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <osMessageQueueGet+0x54>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005394:	f06f 0303 	mvn.w	r3, #3
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800539a:	e038      	b.n	800540e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80053a0:	f107 0310 	add.w	r3, r7, #16
 80053a4:	461a      	mov	r2, r3
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	6a38      	ldr	r0, [r7, #32]
 80053aa:	f000 fcd7 	bl	8005d5c <xQueueReceiveFromISR>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d003      	beq.n	80053bc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80053b4:	f06f 0302 	mvn.w	r3, #2
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053ba:	e028      	b.n	800540e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d025      	beq.n	800540e <osMessageQueueGet+0xce>
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <osMessageQueueGet+0xe0>)
 80053c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053d2:	e01c      	b.n	800540e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <osMessageQueueGet+0xa0>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80053e0:	f06f 0303 	mvn.w	r3, #3
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
 80053e6:	e013      	b.n	8005410 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	6a38      	ldr	r0, [r7, #32]
 80053ee:	f000 fbd5 	bl	8005b9c <xQueueReceive>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d00b      	beq.n	8005410 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80053fe:	f06f 0301 	mvn.w	r3, #1
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
 8005404:	e004      	b.n	8005410 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005406:	f06f 0302 	mvn.w	r3, #2
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
 800540c:	e000      	b.n	8005410 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800540e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005412:	4618      	mov	r0, r3
 8005414:	3728      	adds	r7, #40	; 0x28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200001a0 	.word	0x200001a0
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a06      	ldr	r2, [pc, #24]	; (800544c <vApplicationGetIdleTaskMemory+0x28>)
 8005434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <vApplicationGetIdleTaskMemory+0x2c>)
 800543a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	200001a4 	.word	0x200001a4
 8005450:	2000024c 	.word	0x2000024c

08005454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a07      	ldr	r2, [pc, #28]	; (8005480 <vApplicationGetTimerTaskMemory+0x2c>)
 8005464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a06      	ldr	r2, [pc, #24]	; (8005484 <vApplicationGetTimerTaskMemory+0x30>)
 800546a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2000044c 	.word	0x2000044c
 8005484:	200004f4 	.word	0x200004f4

08005488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f103 0208 	add.w	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f04f 32ff 	mov.w	r2, #4294967295
 80054a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f103 0208 	add.w	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f103 0208 	add.w	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d103      	bne.n	8005544 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e00c      	b.n	800555e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3308      	adds	r3, #8
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e002      	b.n	8005552 <vListInsert+0x2e>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d2f6      	bcs.n	800554c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6892      	ldr	r2, [r2, #8]
 80055aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6852      	ldr	r2, [r2, #4]
 80055b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d103      	bne.n	80055c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1e5a      	subs	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
	...

080055e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005612:	f002 f8f3 	bl	80077fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	3b01      	subs	r3, #1
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	441a      	add	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d114      	bne.n	8005692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01a      	beq.n	80056a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f9e1 	bl	8006a3c <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <xQueueGenericReset+0xcc>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	e009      	b.n	80056a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3310      	adds	r3, #16
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fef6 	bl	8005488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3324      	adds	r3, #36	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fef1 	bl	8005488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056a6:	f002 f8d9 	bl	800785c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056aa:	2301      	movs	r3, #1
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <xQueueGenericCreateStatic+0x52>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <xQueueGenericCreateStatic+0x56>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericCreateStatic+0x58>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	623b      	str	r3, [r7, #32]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <xQueueGenericCreateStatic+0x7e>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <xQueueGenericCreateStatic+0x82>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueGenericCreateStatic+0x84>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fb      	str	r3, [r7, #28]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005756:	2350      	movs	r3, #80	; 0x50
 8005758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b50      	cmp	r3, #80	; 0x50
 800575e:	d00a      	beq.n	8005776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61bb      	str	r3, [r7, #24]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005776:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800578a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f845 	bl	8005828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3730      	adds	r7, #48	; 0x30
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	613b      	str	r3, [r7, #16]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e004      	b.n	80057e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3350      	adds	r3, #80	; 0x50
 80057ec:	4618      	mov	r0, r3
 80057ee:	f002 f905 	bl	80079fc <pvPortMalloc>
 80057f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3350      	adds	r3, #80	; 0x50
 8005802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f805 	bl	8005828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800581e:	69bb      	ldr	r3, [r7, #24]
	}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e002      	b.n	800584a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005856:	2101      	movs	r1, #1
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f7ff fec5 	bl	80055e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xQueueGenericSend+0x32>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <xQueueGenericSend+0x40>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <xQueueGenericSend+0x44>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <xQueueGenericSend+0x46>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <xQueueGenericSend+0x60>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d103      	bne.n	80058de <xQueueGenericSend+0x6e>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <xQueueGenericSend+0x72>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <xQueueGenericSend+0x74>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xQueueGenericSend+0x8e>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	623b      	str	r3, [r7, #32]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058fe:	f001 fa5f 	bl	8006dc0 <xTaskGetSchedulerState>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <xQueueGenericSend+0x9e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <xQueueGenericSend+0xa2>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericSend+0xa4>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSend+0xbe>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	61fb      	str	r3, [r7, #28]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800592e:	f001 ff65 	bl	80077fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <xQueueGenericSend+0xd4>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d129      	bne.n	8005998 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800594a:	f000 fa87 	bl	8005e5c <prvCopyDataToQueue>
 800594e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f86d 	bl	8006a3c <xTaskRemoveFromEventList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005968:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <xQueueGenericSend+0x1f8>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e00a      	b.n	8005990 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <xQueueGenericSend+0x1f8>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005990:	f001 ff64 	bl	800785c <vPortExitCritical>
				return pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	e063      	b.n	8005a60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800599e:	f001 ff5d 	bl	800785c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e05c      	b.n	8005a60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059ac:	f107 0314 	add.w	r3, r7, #20
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f8a7 	bl	8006b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ba:	f001 ff4f 	bl	800785c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059be:	f000 fe15 	bl	80065ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059c2:	f001 ff1b 	bl	80077fc <vPortEnterCritical>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d103      	bne.n	80059dc <xQueueGenericSend+0x16c>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSend+0x182>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f2:	f001 ff33 	bl	800785c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f6:	1d3a      	adds	r2, r7, #4
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f896 	bl	8006b30 <xTaskCheckForTimeOut>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d124      	bne.n	8005a54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0c:	f000 fb1e 	bl	800604c <prvIsQueueFull>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	3310      	adds	r3, #16
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 ffbc 	bl	800699c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a26:	f000 faa9 	bl	8005f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a2a:	f000 fded 	bl	8006608 <xTaskResumeAll>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af7c 	bne.w	800592e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <xQueueGenericSend+0x1f8>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	e772      	b.n	800592e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4a:	f000 fa97 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4e:	f000 fddb 	bl	8006608 <xTaskResumeAll>
 8005a52:	e76c      	b.n	800592e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a56:	f000 fa91 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a5a:	f000 fdd5 	bl	8006608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3738      	adds	r7, #56	; 0x38
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <xQueueGenericSendFromISR+0x3c>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <xQueueGenericSendFromISR+0x40>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <xQueueGenericSendFromISR+0x42>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	623b      	str	r3, [r7, #32]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d103      	bne.n	8005ad6 <xQueueGenericSendFromISR+0x6a>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <xQueueGenericSendFromISR+0x6e>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueGenericSendFromISR+0x70>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61fb      	str	r3, [r7, #28]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005af6:	f001 ff43 	bl	8007980 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005afa:	f3ef 8211 	mrs	r2, BASEPRI
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	61ba      	str	r2, [r7, #24]
 8005b10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <xQueueGenericSendFromISR+0xbc>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d12c      	bne.n	8005b82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b38:	f000 f990 	bl	8005e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d112      	bne.n	8005b6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	3324      	adds	r3, #36	; 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 ff72 	bl	8006a3c <xTaskRemoveFromEventList>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00e      	beq.n	8005b7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e007      	b.n	8005b7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b70:	3301      	adds	r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	b25a      	sxtb	r2, r3
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b80:	e001      	b.n	8005b86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3738      	adds	r7, #56	; 0x38
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	; 0x30
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <xQueueReceive+0x30>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	623b      	str	r3, [r7, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <xQueueReceive+0x3e>
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueReceive+0x42>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueReceive+0x44>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueReceive+0x5e>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61fb      	str	r3, [r7, #28]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bfa:	f001 f8e1 	bl	8006dc0 <xTaskGetSchedulerState>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <xQueueReceive+0x6e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <xQueueReceive+0x72>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <xQueueReceive+0x74>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueReceive+0x8e>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	61bb      	str	r3, [r7, #24]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c2a:	f001 fde7 	bl	80077fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01f      	beq.n	8005c7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3e:	f000 f977 	bl	8005f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1e5a      	subs	r2, r3, #1
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00f      	beq.n	8005c72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	3310      	adds	r3, #16
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fef0 	bl	8006a3c <xTaskRemoveFromEventList>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c62:	4b3d      	ldr	r3, [pc, #244]	; (8005d58 <xQueueReceive+0x1bc>)
 8005c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c72:	f001 fdf3 	bl	800785c <vPortExitCritical>
				return pdPASS;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e069      	b.n	8005d4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c80:	f001 fdec 	bl	800785c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e062      	b.n	8005d4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ff36 	bl	8006b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c9c:	f001 fdde 	bl	800785c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ca0:	f000 fca4 	bl	80065ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ca4:	f001 fdaa 	bl	80077fc <vPortEnterCritical>
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d103      	bne.n	8005cbe <xQueueReceive+0x122>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x138>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cd4:	f001 fdc2 	bl	800785c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cd8:	1d3a      	adds	r2, r7, #4
 8005cda:	f107 0310 	add.w	r3, r7, #16
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 ff25 	bl	8006b30 <xTaskCheckForTimeOut>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d123      	bne.n	8005d34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cee:	f000 f997 	bl	8006020 <prvIsQueueEmpty>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d017      	beq.n	8005d28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fe4b 	bl	800699c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d08:	f000 f938 	bl	8005f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d0c:	f000 fc7c 	bl	8006608 <xTaskResumeAll>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d189      	bne.n	8005c2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <xQueueReceive+0x1bc>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	e780      	b.n	8005c2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f000 f927 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d2e:	f000 fc6b 	bl	8006608 <xTaskResumeAll>
 8005d32:	e77a      	b.n	8005c2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d36:	f000 f921 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d3a:	f000 fc65 	bl	8006608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f000 f96e 	bl	8006020 <prvIsQueueEmpty>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f43f af6f 	beq.w	8005c2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3730      	adds	r7, #48	; 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	; 0x38
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	623b      	str	r3, [r7, #32]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <xQueueReceiveFromISR+0x3a>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <xQueueReceiveFromISR+0x3e>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <xQueueReceiveFromISR+0x40>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61fb      	str	r3, [r7, #28]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db6:	f001 fde3 	bl	8007980 <vPortValidateInterruptPriority>
	__asm volatile
 8005dba:	f3ef 8211 	mrs	r2, BASEPRI
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61ba      	str	r2, [r7, #24]
 8005dd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005dd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02f      	beq.n	8005e42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df0:	f000 f89e 	bl	8005f30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d112      	bne.n	8005e2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d016      	beq.n	8005e3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	3310      	adds	r3, #16
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fe12 	bl	8006a3c <xTaskRemoveFromEventList>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00e      	beq.n	8005e3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e007      	b.n	8005e3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e30:	3301      	adds	r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	b25a      	sxtb	r2, r3
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	e001      	b.n	8005e46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f383 8811 	msr	BASEPRI, r3
}
 8005e50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3738      	adds	r7, #56	; 0x38
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d14d      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 ffb8 	bl	8006dfc <xTaskPriorityDisinherit>
 8005e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	e043      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d119      	bne.n	8005ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6858      	ldr	r0, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	f002 f804 	bl	8007eb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d32b      	bcc.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	e026      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68d8      	ldr	r0, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f001 ffea 	bl	8007eb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d207      	bcs.n	8005f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	425b      	negs	r3, r3
 8005f06:	441a      	add	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d105      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d303      	bcc.n	8005f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68d9      	ldr	r1, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6838      	ldr	r0, [r7, #0]
 8005f70:	f001 ffa0 	bl	8007eb4 <memcpy>
	}
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f84:	f001 fc3a 	bl	80077fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f90:	e011      	b.n	8005fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3324      	adds	r3, #36	; 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fd4c 	bl	8006a3c <xTaskRemoveFromEventList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005faa:	f000 fe23 	bl	8006bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dce9      	bgt.n	8005f92 <prvUnlockQueue+0x16>
 8005fbe:	e000      	b.n	8005fc2 <prvUnlockQueue+0x46>
					break;
 8005fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fca:	f001 fc47 	bl	800785c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fce:	f001 fc15 	bl	80077fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fda:	e011      	b.n	8006000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd27 	bl	8006a3c <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff4:	f000 fdfe 	bl	8006bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	dce9      	bgt.n	8005fdc <prvUnlockQueue+0x60>
 8006008:	e000      	b.n	800600c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22ff      	movs	r2, #255	; 0xff
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006014:	f001 fc22 	bl	800785c <vPortExitCritical>
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006028:	f001 fbe8 	bl	80077fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e001      	b.n	800603e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603e:	f001 fc0d 	bl	800785c <vPortExitCritical>

	return xReturn;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006054:	f001 fbd2 	bl	80077fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	429a      	cmp	r2, r3
 8006062:	d102      	bne.n	800606a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e001      	b.n	800606e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f001 fbf5 	bl	800785c <vPortExitCritical>

	return xReturn;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e014      	b.n	80060b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800608c:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006098:	490b      	ldr	r1, [pc, #44]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060ae:	e006      	b.n	80060be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d9e7      	bls.n	800608c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	200008f4 	.word	0x200008f4

080060cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060dc:	f001 fb8e 	bl	80077fc <vPortEnterCritical>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <vQueueWaitForMessageRestricted+0x2a>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <vQueueWaitForMessageRestricted+0x40>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610c:	f001 fba6 	bl	800785c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fc5f 	bl	80069e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7ff ff28 	bl	8005f7c <prvUnlockQueue>
	}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af04      	add	r7, sp, #16
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTaskCreateStatic+0x46>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	61fb      	str	r3, [r7, #28]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617a:	23a8      	movs	r3, #168	; 0xa8
 800617c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2ba8      	cmp	r3, #168	; 0xa8
 8006182:	d00a      	beq.n	800619a <xTaskCreateStatic+0x66>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61bb      	str	r3, [r7, #24]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800619a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01e      	beq.n	80061e0 <xTaskCreateStatic+0xac>
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061ba:	2300      	movs	r3, #0
 80061bc:	9303      	str	r3, [sp, #12]
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	9302      	str	r3, [sp, #8]
 80061c2:	f107 0314 	add.w	r3, r7, #20
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f850 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061da:	f000 f8f3 	bl	80063c4 <prvAddNewTaskToReadyList>
 80061de:	e001      	b.n	80061e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e4:	697b      	ldr	r3, [r7, #20]
	}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3728      	adds	r7, #40	; 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b08c      	sub	sp, #48	; 0x30
 80061f2:	af04      	add	r7, sp, #16
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fbfa 	bl	80079fc <pvPortMalloc>
 8006208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00e      	beq.n	800622e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006210:	20a8      	movs	r0, #168	; 0xa8
 8006212:	f001 fbf3 	bl	80079fc <pvPortMalloc>
 8006216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
 8006224:	e005      	b.n	8006232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f001 fcac 	bl	8007b84 <vPortFree>
 800622c:	e001      	b.n	8006232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	2300      	movs	r3, #0
 8006244:	9303      	str	r3, [sp, #12]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f80e 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625c:	69f8      	ldr	r0, [r7, #28]
 800625e:	f000 f8b1 	bl	80063c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006262:	2301      	movs	r3, #1
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e002      	b.n	800626e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800626e:	69bb      	ldr	r3, [r7, #24]
	}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	461a      	mov	r2, r3
 8006290:	21a5      	movs	r1, #165	; 0xa5
 8006292:	f001 fd8b 	bl	8007dac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	3b01      	subs	r3, #1
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01f      	beq.n	8006316 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e012      	b.n	8006302 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	7819      	ldrb	r1, [r3, #0]
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	3334      	adds	r3, #52	; 0x34
 80062ec:	460a      	mov	r2, r1
 80062ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d006      	beq.n	800630a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	3301      	adds	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b0f      	cmp	r3, #15
 8006306:	d9e9      	bls.n	80062dc <prvInitialiseNewTask+0x64>
 8006308:	e000      	b.n	800630c <prvInitialiseNewTask+0x94>
			{
				break;
 800630a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	e003      	b.n	800631e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b37      	cmp	r3, #55	; 0x37
 8006322:	d901      	bls.n	8006328 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006324:	2337      	movs	r3, #55	; 0x37
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff f8c1 	bl	80054c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	3318      	adds	r3, #24
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff f8bc 	bl	80054c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2200      	movs	r2, #0
 8006370:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	3354      	adds	r3, #84	; 0x54
 8006378:	224c      	movs	r2, #76	; 0x4c
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fd15 	bl	8007dac <memset>
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <prvInitialiseNewTask+0x140>)
 8006386:	659a      	str	r2, [r3, #88]	; 0x58
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <prvInitialiseNewTask+0x144>)
 800638c:	65da      	str	r2, [r3, #92]	; 0x5c
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <prvInitialiseNewTask+0x148>)
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	69b8      	ldr	r0, [r7, #24]
 800639a:	f001 f93d 	bl	8007618 <pxPortInitialiseStack>
 800639e:	4602      	mov	r2, r0
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b0:	bf00      	nop
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20005fd0 	.word	0x20005fd0
 80063bc:	20006038 	.word	0x20006038
 80063c0:	200060a0 	.word	0x200060a0

080063c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063cc:	f001 fa16 	bl	80077fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <prvAddNewTaskToReadyList+0xc4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <prvAddNewTaskToReadyList+0xc4>)
 80063d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063da:	4b2c      	ldr	r3, [pc, #176]	; (800648c <prvAddNewTaskToReadyList+0xc8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063e2:	4a2a      	ldr	r2, [pc, #168]	; (800648c <prvAddNewTaskToReadyList+0xc8>)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <prvAddNewTaskToReadyList+0xc4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d110      	bne.n	8006412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063f0:	f000 fc24 	bl	8006c3c <prvInitialiseTaskLists>
 80063f4:	e00d      	b.n	8006412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063f6:	4b26      	ldr	r3, [pc, #152]	; (8006490 <prvAddNewTaskToReadyList+0xcc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <prvAddNewTaskToReadyList+0xc8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	429a      	cmp	r2, r3
 800640a:	d802      	bhi.n	8006412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800640c:	4a1f      	ldr	r2, [pc, #124]	; (800648c <prvAddNewTaskToReadyList+0xc8>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006412:	4b20      	ldr	r3, [pc, #128]	; (8006494 <prvAddNewTaskToReadyList+0xd0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <prvAddNewTaskToReadyList+0xd0>)
 800641a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <prvAddNewTaskToReadyList+0xd0>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <prvAddNewTaskToReadyList+0xd4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <prvAddNewTaskToReadyList+0x74>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a18      	ldr	r2, [pc, #96]	; (8006498 <prvAddNewTaskToReadyList+0xd4>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <prvAddNewTaskToReadyList+0xd8>)
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7ff f845 	bl	80054de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006454:	f001 fa02 	bl	800785c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006458:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <prvAddNewTaskToReadyList+0xcc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <prvAddNewTaskToReadyList+0xc8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	429a      	cmp	r2, r3
 800646c:	d207      	bcs.n	800647e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <prvAddNewTaskToReadyList+0xdc>)
 8006470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000e08 	.word	0x20000e08
 800648c:	20000934 	.word	0x20000934
 8006490:	20000e14 	.word	0x20000e14
 8006494:	20000e24 	.word	0x20000e24
 8006498:	20000e10 	.word	0x20000e10
 800649c:	20000938 	.word	0x20000938
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d017      	beq.n	80064e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <vTaskDelay+0x60>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <vTaskDelay+0x30>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60bb      	str	r3, [r7, #8]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064d4:	f000 f88a 	bl	80065ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064d8:	2100      	movs	r1, #0
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fcfc 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064e0:	f000 f892 	bl	8006608 <xTaskResumeAll>
 80064e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d107      	bne.n	80064fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <vTaskDelay+0x64>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000e30 	.word	0x20000e30
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800651a:	463a      	mov	r2, r7
 800651c:	1d39      	adds	r1, r7, #4
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe ff7e 	bl	8005424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	460a      	mov	r2, r1
 800653a:	4924      	ldr	r1, [pc, #144]	; (80065cc <vTaskStartScheduler+0xc0>)
 800653c:	4824      	ldr	r0, [pc, #144]	; (80065d0 <vTaskStartScheduler+0xc4>)
 800653e:	f7ff fdf9 	bl	8006134 <xTaskCreateStatic>
 8006542:	4603      	mov	r3, r0
 8006544:	4a23      	ldr	r2, [pc, #140]	; (80065d4 <vTaskStartScheduler+0xc8>)
 8006546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <vTaskStartScheduler+0xc8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e001      	b.n	800655a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006560:	f000 fd0e 	bl	8006f80 <xTimerCreateTimerTask>
 8006564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d11b      	bne.n	80065a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	613b      	str	r3, [r7, #16]
}
 800657e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <vTaskStartScheduler+0xcc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3354      	adds	r3, #84	; 0x54
 8006586:	4a15      	ldr	r2, [pc, #84]	; (80065dc <vTaskStartScheduler+0xd0>)
 8006588:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800658a:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <vTaskStartScheduler+0xd4>)
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <vTaskStartScheduler+0xd8>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <vTaskStartScheduler+0xdc>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800659e:	f001 f8bb 	bl	8007718 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065a2:	e00e      	b.n	80065c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d10a      	bne.n	80065c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <vTaskStartScheduler+0xb4>
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	08007fec 	.word	0x08007fec
 80065d0:	08006c0d 	.word	0x08006c0d
 80065d4:	20000e2c 	.word	0x20000e2c
 80065d8:	20000934 	.word	0x20000934
 80065dc:	20000078 	.word	0x20000078
 80065e0:	20000e28 	.word	0x20000e28
 80065e4:	20000e14 	.word	0x20000e14
 80065e8:	20000e0c 	.word	0x20000e0c

080065ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <vTaskSuspendAll+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a03      	ldr	r2, [pc, #12]	; (8006604 <vTaskSuspendAll+0x18>)
 80065f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000e30 	.word	0x20000e30

08006608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006616:	4b42      	ldr	r3, [pc, #264]	; (8006720 <xTaskResumeAll+0x118>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xTaskResumeAll+0x2c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	603b      	str	r3, [r7, #0]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006634:	f001 f8e2 	bl	80077fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006638:	4b39      	ldr	r3, [pc, #228]	; (8006720 <xTaskResumeAll+0x118>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a38      	ldr	r2, [pc, #224]	; (8006720 <xTaskResumeAll+0x118>)
 8006640:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006642:	4b37      	ldr	r3, [pc, #220]	; (8006720 <xTaskResumeAll+0x118>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d162      	bne.n	8006710 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800664a:	4b36      	ldr	r3, [pc, #216]	; (8006724 <xTaskResumeAll+0x11c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d05e      	beq.n	8006710 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006652:	e02f      	b.n	80066b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006654:	4b34      	ldr	r3, [pc, #208]	; (8006728 <xTaskResumeAll+0x120>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3318      	adds	r3, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe ff97 	bl	8005594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe ff92 	bl	8005594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <xTaskResumeAll+0x124>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d903      	bls.n	8006684 <xTaskResumeAll+0x7c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	4a2a      	ldr	r2, [pc, #168]	; (800672c <xTaskResumeAll+0x124>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <xTaskResumeAll+0x128>)
 8006692:	441a      	add	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7fe ff1f 	bl	80054de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4b23      	ldr	r3, [pc, #140]	; (8006734 <xTaskResumeAll+0x12c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d302      	bcc.n	80066b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <xTaskResumeAll+0x130>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b4:	4b1c      	ldr	r3, [pc, #112]	; (8006728 <xTaskResumeAll+0x120>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1cb      	bne.n	8006654 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066c2:	f000 fb5d 	bl	8006d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <xTaskResumeAll+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066d2:	f000 f845 	bl	8006760 <xTaskIncrementTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <xTaskResumeAll+0x130>)
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f1      	bne.n	80066d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <xTaskResumeAll+0x134>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <xTaskResumeAll+0x130>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <xTaskResumeAll+0x138>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006710:	f001 f8a4 	bl	800785c <vPortExitCritical>

	return xAlreadyYielded;
 8006714:	68bb      	ldr	r3, [r7, #8]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000e30 	.word	0x20000e30
 8006724:	20000e08 	.word	0x20000e08
 8006728:	20000dc8 	.word	0x20000dc8
 800672c:	20000e10 	.word	0x20000e10
 8006730:	20000938 	.word	0x20000938
 8006734:	20000934 	.word	0x20000934
 8006738:	20000e1c 	.word	0x20000e1c
 800673c:	20000e18 	.word	0x20000e18
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800674a:	4b04      	ldr	r3, [pc, #16]	; (800675c <xTaskGetTickCount+0x18>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006750:	687b      	ldr	r3, [r7, #4]
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr
 800675c:	20000e0c 	.word	0x20000e0c

08006760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b4f      	ldr	r3, [pc, #316]	; (80068a8 <xTaskIncrementTick+0x148>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8089 	bne.w	8006886 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006774:	4b4d      	ldr	r3, [pc, #308]	; (80068ac <xTaskIncrementTick+0x14c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800677c:	4a4b      	ldr	r2, [pc, #300]	; (80068ac <xTaskIncrementTick+0x14c>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d120      	bne.n	80067ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	603b      	str	r3, [r7, #0]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xTaskIncrementTick+0x46>
 80067a8:	4b41      	ldr	r3, [pc, #260]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a3f      	ldr	r2, [pc, #252]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	4b3e      	ldr	r3, [pc, #248]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	4a3d      	ldr	r2, [pc, #244]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	f000 fadb 	bl	8006d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ca:	4b3c      	ldr	r3, [pc, #240]	; (80068bc <xTaskIncrementTick+0x15c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d349      	bcc.n	8006868 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d4:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067de:	4b37      	ldr	r3, [pc, #220]	; (80068bc <xTaskIncrementTick+0x15c>)
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	601a      	str	r2, [r3, #0]
					break;
 80067e6:	e03f      	b.n	8006868 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e8:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d203      	bcs.n	8006808 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006800:	4a2e      	ldr	r2, [pc, #184]	; (80068bc <xTaskIncrementTick+0x15c>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006806:	e02f      	b.n	8006868 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fec1 	bl	8005594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3318      	adds	r3, #24
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe feb8 	bl	8005594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <xTaskIncrementTick+0x160>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d903      	bls.n	8006838 <xTaskIncrementTick+0xd8>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <xTaskIncrementTick+0x160>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006846:	441a      	add	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe fe45 	bl	80054de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <xTaskIncrementTick+0x168>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	429a      	cmp	r2, r3
 8006860:	d3b8      	bcc.n	80067d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006866:	e7b5      	b.n	80067d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <xTaskIncrementTick+0x168>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	4915      	ldr	r1, [pc, #84]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d907      	bls.n	8006890 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e004      	b.n	8006890 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <xTaskIncrementTick+0x16c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <xTaskIncrementTick+0x16c>)
 800688e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <xTaskIncrementTick+0x170>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800689c:	697b      	ldr	r3, [r7, #20]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000e30 	.word	0x20000e30
 80068ac:	20000e0c 	.word	0x20000e0c
 80068b0:	20000dc0 	.word	0x20000dc0
 80068b4:	20000dc4 	.word	0x20000dc4
 80068b8:	20000e20 	.word	0x20000e20
 80068bc:	20000e28 	.word	0x20000e28
 80068c0:	20000e10 	.word	0x20000e10
 80068c4:	20000938 	.word	0x20000938
 80068c8:	20000934 	.word	0x20000934
 80068cc:	20000e18 	.word	0x20000e18
 80068d0:	20000e1c 	.word	0x20000e1c

080068d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068da:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <vTaskSwitchContext+0xb0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <vTaskSwitchContext+0xb4>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e8:	e046      	b.n	8006978 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068ea:	4b27      	ldr	r3, [pc, #156]	; (8006988 <vTaskSwitchContext+0xb4>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f0:	4b26      	ldr	r3, [pc, #152]	; (800698c <vTaskSwitchContext+0xb8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e010      	b.n	800691a <vTaskSwitchContext+0x46>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <vTaskSwitchContext+0x40>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <vTaskSwitchContext+0x3e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3b01      	subs	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	491d      	ldr	r1, [pc, #116]	; (8006990 <vTaskSwitchContext+0xbc>)
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0e4      	beq.n	80068f8 <vTaskSwitchContext+0x24>
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <vTaskSwitchContext+0xbc>)
 800693a:	4413      	add	r3, r2
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	3308      	adds	r3, #8
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <vTaskSwitchContext+0x8a>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a0b      	ldr	r2, [pc, #44]	; (8006994 <vTaskSwitchContext+0xc0>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <vTaskSwitchContext+0xb8>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800696e:	4b09      	ldr	r3, [pc, #36]	; (8006994 <vTaskSwitchContext+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3354      	adds	r3, #84	; 0x54
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <vTaskSwitchContext+0xc4>)
 8006976:	6013      	str	r3, [r2, #0]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000e30 	.word	0x20000e30
 8006988:	20000e1c 	.word	0x20000e1c
 800698c:	20000e10 	.word	0x20000e10
 8006990:	20000938 	.word	0x20000938
 8006994:	20000934 	.word	0x20000934
 8006998:	20000078 	.word	0x20000078

0800699c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vTaskPlaceOnEventList+0x44>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3318      	adds	r3, #24
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fe fdaa 	bl	8005524 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069d0:	2101      	movs	r1, #1
 80069d2:	6838      	ldr	r0, [r7, #0]
 80069d4:	f000 fa80 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000934 	.word	0x20000934

080069e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	617b      	str	r3, [r7, #20]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3318      	adds	r3, #24
 8006a12:	4619      	mov	r1, r3
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7fe fd62 	bl	80054de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a20:	f04f 33ff 	mov.w	r3, #4294967295
 8006a24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	68b8      	ldr	r0, [r7, #8]
 8006a2a:	f000 fa55 	bl	8006ed8 <prvAddCurrentTaskToDelayedList>
	}
 8006a2e:	bf00      	nop
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000934 	.word	0x20000934

08006a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60fb      	str	r3, [r7, #12]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	3318      	adds	r3, #24
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fd91 	bl	8005594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a72:	4b1e      	ldr	r3, [pc, #120]	; (8006aec <xTaskRemoveFromEventList+0xb0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d11d      	bne.n	8006ab6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fd88 	bl	8005594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <xTaskRemoveFromEventList+0xb4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d903      	bls.n	8006a98 <xTaskRemoveFromEventList+0x5c>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <xTaskRemoveFromEventList+0xb4>)
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <xTaskRemoveFromEventList+0xb8>)
 8006aa6:	441a      	add	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe fd15 	bl	80054de <vListInsertEnd>
 8006ab4:	e005      	b.n	8006ac2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3318      	adds	r3, #24
 8006aba:	4619      	mov	r1, r3
 8006abc:	480e      	ldr	r0, [pc, #56]	; (8006af8 <xTaskRemoveFromEventList+0xbc>)
 8006abe:	f7fe fd0e 	bl	80054de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <xTaskRemoveFromEventList+0xc0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d905      	bls.n	8006adc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <xTaskRemoveFromEventList+0xc4>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e001      	b.n	8006ae0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000e30 	.word	0x20000e30
 8006af0:	20000e10 	.word	0x20000e10
 8006af4:	20000938 	.word	0x20000938
 8006af8:	20000dc8 	.word	0x20000dc8
 8006afc:	20000934 	.word	0x20000934
 8006b00:	20000e1c 	.word	0x20000e1c

08006b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <vTaskInternalSetTimeOutState+0x24>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <vTaskInternalSetTimeOutState+0x28>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	605a      	str	r2, [r3, #4]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000e20 	.word	0x20000e20
 8006b2c:	20000e0c 	.word	0x20000e0c

08006b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60fb      	str	r3, [r7, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b72:	f000 fe43 	bl	80077fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <xTaskCheckForTimeOut+0xbc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d102      	bne.n	8006b96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e023      	b.n	8006bde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <xTaskCheckForTimeOut+0xc0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d007      	beq.n	8006bb2 <xTaskCheckForTimeOut+0x82>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e015      	b.n	8006bde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d20b      	bcs.n	8006bd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ff9b 	bl	8006b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e004      	b.n	8006bde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bde:	f000 fe3d 	bl	800785c <vPortExitCritical>

	return xReturn;
 8006be2:	69fb      	ldr	r3, [r7, #28]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000e0c 	.word	0x20000e0c
 8006bf0:	20000e20 	.word	0x20000e20

08006bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bf8:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <vTaskMissedYield+0x14>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
}
 8006bfe:	bf00      	nop
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000e1c 	.word	0x20000e1c

08006c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c14:	f000 f852 	bl	8006cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <prvIdleTask+0x28>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d9f9      	bls.n	8006c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <prvIdleTask+0x2c>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c30:	e7f0      	b.n	8006c14 <prvIdleTask+0x8>
 8006c32:	bf00      	nop
 8006c34:	20000938 	.word	0x20000938
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c42:	2300      	movs	r3, #0
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	e00c      	b.n	8006c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <prvInitialiseTaskLists+0x60>)
 8006c54:	4413      	add	r3, r2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fc16 	bl	8005488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	607b      	str	r3, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b37      	cmp	r3, #55	; 0x37
 8006c66:	d9ef      	bls.n	8006c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c68:	480d      	ldr	r0, [pc, #52]	; (8006ca0 <prvInitialiseTaskLists+0x64>)
 8006c6a:	f7fe fc0d 	bl	8005488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c6e:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <prvInitialiseTaskLists+0x68>)
 8006c70:	f7fe fc0a 	bl	8005488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c74:	480c      	ldr	r0, [pc, #48]	; (8006ca8 <prvInitialiseTaskLists+0x6c>)
 8006c76:	f7fe fc07 	bl	8005488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c7a:	480c      	ldr	r0, [pc, #48]	; (8006cac <prvInitialiseTaskLists+0x70>)
 8006c7c:	f7fe fc04 	bl	8005488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c80:	480b      	ldr	r0, [pc, #44]	; (8006cb0 <prvInitialiseTaskLists+0x74>)
 8006c82:	f7fe fc01 	bl	8005488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <prvInitialiseTaskLists+0x78>)
 8006c88:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <prvInitialiseTaskLists+0x64>)
 8006c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <prvInitialiseTaskLists+0x7c>)
 8006c8e:	4a05      	ldr	r2, [pc, #20]	; (8006ca4 <prvInitialiseTaskLists+0x68>)
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000938 	.word	0x20000938
 8006ca0:	20000d98 	.word	0x20000d98
 8006ca4:	20000dac 	.word	0x20000dac
 8006ca8:	20000dc8 	.word	0x20000dc8
 8006cac:	20000ddc 	.word	0x20000ddc
 8006cb0:	20000df4 	.word	0x20000df4
 8006cb4:	20000dc0 	.word	0x20000dc0
 8006cb8:	20000dc4 	.word	0x20000dc4

08006cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc2:	e019      	b.n	8006cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cc4:	f000 fd9a 	bl	80077fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc8:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <prvCheckTasksWaitingTermination+0x50>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fe fc5d 	bl	8005594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cda:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <prvCheckTasksWaitingTermination+0x54>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	4a0b      	ldr	r2, [pc, #44]	; (8006d10 <prvCheckTasksWaitingTermination+0x54>)
 8006ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <prvCheckTasksWaitingTermination+0x58>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <prvCheckTasksWaitingTermination+0x58>)
 8006cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cee:	f000 fdb5 	bl	800785c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f810 	bl	8006d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <prvCheckTasksWaitingTermination+0x58>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e1      	bne.n	8006cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000ddc 	.word	0x20000ddc
 8006d10:	20000e08 	.word	0x20000e08
 8006d14:	20000df0 	.word	0x20000df0

08006d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3354      	adds	r3, #84	; 0x54
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 f849 	bl	8007dbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 ff23 	bl	8007b84 <vPortFree>
				vPortFree( pxTCB );
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 ff20 	bl	8007b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d44:	e018      	b.n	8006d78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d103      	bne.n	8006d58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 ff17 	bl	8007b84 <vPortFree>
	}
 8006d56:	e00f      	b.n	8006d78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d00a      	beq.n	8006d78 <prvDeleteTCB+0x60>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60fb      	str	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <prvDeleteTCB+0x5e>
	}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d98:	e008      	b.n	8006dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000dc0 	.word	0x20000dc0
 8006dbc:	20000e28 	.word	0x20000e28

08006dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <xTaskGetSchedulerState+0x34>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	e008      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd4:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <xTaskGetSchedulerState+0x38>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	e001      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006de6:	687b      	ldr	r3, [r7, #4]
	}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000e14 	.word	0x20000e14
 8006df8:	20000e30 	.word	0x20000e30

08006dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d056      	beq.n	8006ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e12:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <xTaskPriorityDisinherit+0xd0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d00a      	beq.n	8006e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	60bb      	str	r3, [r7, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d02c      	beq.n	8006ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d128      	bne.n	8006ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fb8e 	bl	8005594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <xTaskPriorityDisinherit+0xd4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <xTaskPriorityDisinherit+0xa4>
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ed0 <xTaskPriorityDisinherit+0xd4>)
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <xTaskPriorityDisinherit+0xd8>)
 8006eae:	441a      	add	r2, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fe fb11 	bl	80054de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ec0:	697b      	ldr	r3, [r7, #20]
	}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000934 	.word	0x20000934
 8006ed0:	20000e10 	.word	0x20000e10
 8006ed4:	20000938 	.word	0x20000938

08006ed8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ee2:	4b21      	ldr	r3, [pc, #132]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fb50 	bl	8005594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d10a      	bne.n	8006f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f02:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4819      	ldr	r0, [pc, #100]	; (8006f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f0c:	f7fe fae7 	bl	80054de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f10:	e026      	b.n	8006f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f1a:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d209      	bcs.n	8006f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe faf4 	bl	8005524 <vListInsert>
}
 8006f3c:	e010      	b.n	8006f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7fe faea 	bl	8005524 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d202      	bcs.n	8006f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6013      	str	r3, [r2, #0]
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000e0c 	.word	0x20000e0c
 8006f6c:	20000934 	.word	0x20000934
 8006f70:	20000df4 	.word	0x20000df4
 8006f74:	20000dc4 	.word	0x20000dc4
 8006f78:	20000dc0 	.word	0x20000dc0
 8006f7c:	20000e28 	.word	0x20000e28

08006f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f8a:	f000 fb05 	bl	8007598 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <xTimerCreateTimerTask+0x80>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d021      	beq.n	8006fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f9e:	1d3a      	adds	r2, r7, #4
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fa53 	bl	8005454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	9202      	str	r2, [sp, #8]
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	2302      	movs	r3, #2
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	4910      	ldr	r1, [pc, #64]	; (8007004 <xTimerCreateTimerTask+0x84>)
 8006fc2:	4811      	ldr	r0, [pc, #68]	; (8007008 <xTimerCreateTimerTask+0x88>)
 8006fc4:	f7ff f8b6 	bl	8006134 <xTaskCreateStatic>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4a10      	ldr	r2, [pc, #64]	; (800700c <xTimerCreateTimerTask+0x8c>)
 8006fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTimerCreateTimerTask+0x8c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ff6:	697b      	ldr	r3, [r7, #20]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000e64 	.word	0x20000e64
 8007004:	08007ff4 	.word	0x08007ff4
 8007008:	08007145 	.word	0x08007145
 800700c:	20000e68 	.word	0x20000e68

08007010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	623b      	str	r3, [r7, #32]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <xTimerGenericCommand+0x98>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02a      	beq.n	800709c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b05      	cmp	r3, #5
 8007056:	dc18      	bgt.n	800708a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007058:	f7ff feb2 	bl	8006dc0 <xTaskGetSchedulerState>
 800705c:	4603      	mov	r3, r0
 800705e:	2b02      	cmp	r3, #2
 8007060:	d109      	bne.n	8007076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <xTimerGenericCommand+0x98>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f107 0110 	add.w	r1, r7, #16
 800706a:	2300      	movs	r3, #0
 800706c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706e:	f7fe fbff 	bl	8005870 <xQueueGenericSend>
 8007072:	6278      	str	r0, [r7, #36]	; 0x24
 8007074:	e012      	b.n	800709c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <xTimerGenericCommand+0x98>)
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f107 0110 	add.w	r1, r7, #16
 800707e:	2300      	movs	r3, #0
 8007080:	2200      	movs	r2, #0
 8007082:	f7fe fbf5 	bl	8005870 <xQueueGenericSend>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24
 8007088:	e008      	b.n	800709c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <xTimerGenericCommand+0x98>)
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	f107 0110 	add.w	r1, r7, #16
 8007092:	2300      	movs	r3, #0
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	f7fe fce9 	bl	8005a6c <xQueueGenericSendFromISR>
 800709a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000e64 	.word	0x20000e64

080070ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <prvProcessExpiredTimer+0x94>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fa65 	bl	8005594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d022      	beq.n	800711e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	18d1      	adds	r1, r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	6978      	ldr	r0, [r7, #20]
 80070e6:	f000 f8cf 	bl	8007288 <prvInsertTimerInActiveList>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01f      	beq.n	8007130 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070f0:	2300      	movs	r3, #0
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	2300      	movs	r3, #0
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	2100      	movs	r1, #0
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f7ff ff88 	bl	8007010 <xTimerGenericCommand>
 8007100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d113      	bne.n	8007130 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	60fb      	str	r3, [r7, #12]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	6978      	ldr	r0, [r7, #20]
 8007136:	4798      	blx	r3
}
 8007138:	bf00      	nop
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000e5c 	.word	0x20000e5c

08007144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f857 	bl	8007204 <prvGetNextExpireTime>
 8007156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f803 	bl	8007168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007162:	f000 f8d3 	bl	800730c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007166:	e7f1      	b.n	800714c <prvTimerTask+0x8>

08007168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007172:	f7ff fa3b 	bl	80065ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f864 	bl	8007248 <prvSampleTimeNow>
 8007180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d130      	bne.n	80071ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <prvProcessTimerOrBlockTask+0x3c>
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d806      	bhi.n	80071a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007196:	f7ff fa37 	bl	8006608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff85 	bl	80070ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071a2:	e024      	b.n	80071ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d008      	beq.n	80071bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <prvProcessTimerOrBlockTask+0x90>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <prvProcessTimerOrBlockTask+0x50>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <prvProcessTimerOrBlockTask+0x52>
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <prvProcessTimerOrBlockTask+0x94>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4619      	mov	r1, r3
 80071ca:	f7fe ff7f 	bl	80060cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ce:	f7ff fa1b 	bl	8006608 <xTaskResumeAll>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <prvProcessTimerOrBlockTask+0x98>)
 80071da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	f3bf 8f6f 	isb	sy
}
 80071e8:	e001      	b.n	80071ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071ea:	f7ff fa0d 	bl	8006608 <xTaskResumeAll>
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000e60 	.word	0x20000e60
 80071fc:	20000e64 	.word	0x20000e64
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <prvGetNextExpireTime+0x40>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <prvGetNextExpireTime+0x16>
 8007216:	2201      	movs	r2, #1
 8007218:	e000      	b.n	800721c <prvGetNextExpireTime+0x18>
 800721a:	2200      	movs	r2, #0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <prvGetNextExpireTime+0x40>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e001      	b.n	8007238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	20000e5c 	.word	0x20000e5c

08007248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007250:	f7ff fa78 	bl	8006744 <xTaskGetTickCount>
 8007254:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	429a      	cmp	r2, r3
 800725e:	d205      	bcs.n	800726c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007260:	f000 f936 	bl	80074d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007272:	4a04      	ldr	r2, [pc, #16]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007278:	68fb      	ldr	r3, [r7, #12]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000e6c 	.word	0x20000e6c

08007288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d812      	bhi.n	80072d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e01b      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072c2:	4b10      	ldr	r3, [pc, #64]	; (8007304 <prvInsertTimerInActiveList+0x7c>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe f929 	bl	8005524 <vListInsert>
 80072d2:	e012      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d206      	bcs.n	80072ea <prvInsertTimerInActiveList+0x62>
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d302      	bcc.n	80072ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e007      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <prvInsertTimerInActiveList+0x80>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fe f915 	bl	8005524 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072fa:	697b      	ldr	r3, [r7, #20]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000e60 	.word	0x20000e60
 8007308:	20000e5c 	.word	0x20000e5c

0800730c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007312:	e0ca      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da18      	bge.n	800734c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	3304      	adds	r3, #4
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61fb      	str	r3, [r7, #28]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007342:	6850      	ldr	r0, [r2, #4]
 8007344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007346:	6892      	ldr	r2, [r2, #8]
 8007348:	4611      	mov	r1, r2
 800734a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f2c0 80ab 	blt.w	80074aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	3304      	adds	r3, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe f915 	bl	8005594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736a:	463b      	mov	r3, r7
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ff6b 	bl	8007248 <prvSampleTimeNow>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b09      	cmp	r3, #9
 8007378:	f200 8096 	bhi.w	80074a8 <prvProcessReceivedCommands+0x19c>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <prvProcessReceivedCommands+0x78>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073ad 	.word	0x080073ad
 8007390:	08007421 	.word	0x08007421
 8007394:	08007435 	.word	0x08007435
 8007398:	0800747f 	.word	0x0800747f
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073ad 	.word	0x080073ad
 80073a4:	08007421 	.word	0x08007421
 80073a8:	08007435 	.word	0x08007435
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	18d1      	adds	r1, r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073cc:	f7ff ff5c 	bl	8007288 <prvInsertTimerInActiveList>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d069      	beq.n	80074aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d05e      	beq.n	80074aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	441a      	add	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fe:	f7ff fe07 	bl	8007010 <xTimerGenericCommand>
 8007402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d14f      	bne.n	80074aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	61bb      	str	r3, [r7, #24]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	b2da      	uxtb	r2, r3
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007432:	e03a      	b.n	80074aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	617b      	str	r3, [r7, #20]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	18d1      	adds	r1, r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007478:	f7ff ff06 	bl	8007288 <prvInsertTimerInActiveList>
					break;
 800747c:	e015      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f000 fb79 	bl	8007b84 <vPortFree>
 8007492:	e00a      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074a6:	e000      	b.n	80074aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80074a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <prvProcessReceivedCommands+0x1c0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	1d39      	adds	r1, r7, #4
 80074b0:	2200      	movs	r2, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fb72 	bl	8005b9c <xQueueReceive>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f af2a 	bne.w	8007314 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000e64 	.word	0x20000e64

080074d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d6:	e048      	b.n	800756a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d8:	4b2d      	ldr	r3, [pc, #180]	; (8007590 <prvSwitchTimerLists+0xc0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e2:	4b2b      	ldr	r3, [pc, #172]	; (8007590 <prvSwitchTimerLists+0xc0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe f84f 	bl	8005594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d02e      	beq.n	800756a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4413      	add	r3, r2
 8007514:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d90e      	bls.n	800753c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <prvSwitchTimerLists+0xc0>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fd fff5 	bl	8005524 <vListInsert>
 800753a:	e016      	b.n	800756a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fd62 	bl	8007010 <xTimerGenericCommand>
 800754c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	603b      	str	r3, [r7, #0]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <prvSwitchTimerLists+0xc0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1b1      	bne.n	80074d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <prvSwitchTimerLists+0xc0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvSwitchTimerLists+0xc4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvSwitchTimerLists+0xc0>)
 8007580:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <prvSwitchTimerLists+0xc4>)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6013      	str	r3, [r2, #0]
}
 8007588:	bf00      	nop
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000e5c 	.word	0x20000e5c
 8007594:	20000e60 	.word	0x20000e60

08007598 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800759e:	f000 f92d 	bl	80077fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d120      	bne.n	80075ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075aa:	4814      	ldr	r0, [pc, #80]	; (80075fc <prvCheckForValidListAndQueue+0x64>)
 80075ac:	f7fd ff6c 	bl	8005488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075b0:	4813      	ldr	r0, [pc, #76]	; (8007600 <prvCheckForValidListAndQueue+0x68>)
 80075b2:	f7fd ff69 	bl	8005488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <prvCheckForValidListAndQueue+0x6c>)
 80075b8:	4a10      	ldr	r2, [pc, #64]	; (80075fc <prvCheckForValidListAndQueue+0x64>)
 80075ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <prvCheckForValidListAndQueue+0x70>)
 80075be:	4a10      	ldr	r2, [pc, #64]	; (8007600 <prvCheckForValidListAndQueue+0x68>)
 80075c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	4b11      	ldr	r3, [pc, #68]	; (800760c <prvCheckForValidListAndQueue+0x74>)
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <prvCheckForValidListAndQueue+0x78>)
 80075ca:	2110      	movs	r1, #16
 80075cc:	200a      	movs	r0, #10
 80075ce:	f7fe f873 	bl	80056b8 <xQueueGenericCreateStatic>
 80075d2:	4603      	mov	r3, r0
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	490b      	ldr	r1, [pc, #44]	; (8007614 <prvCheckForValidListAndQueue+0x7c>)
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fd48 	bl	800607c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ec:	f000 f936 	bl	800785c <vPortExitCritical>
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000e64 	.word	0x20000e64
 80075fc:	20000e34 	.word	0x20000e34
 8007600:	20000e48 	.word	0x20000e48
 8007604:	20000e5c 	.word	0x20000e5c
 8007608:	20000e60 	.word	0x20000e60
 800760c:	20000f10 	.word	0x20000f10
 8007610:	20000e70 	.word	0x20000e70
 8007614:	08007ffc 	.word	0x08007ffc

08007618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b04      	subs	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b04      	subs	r3, #4
 8007636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3b04      	subs	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007648:	4a08      	ldr	r2, [pc, #32]	; (800766c <pxPortInitialiseStack+0x54>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3b14      	subs	r3, #20
 8007652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b20      	subs	r3, #32
 800765e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007660:	68fb      	ldr	r3, [r7, #12]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr
 800766c:	08007671 	.word	0x08007671

08007670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <prvTaskExitError+0x54>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007682:	d00a      	beq.n	800769a <prvTaskExitError+0x2a>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <prvTaskExitError+0x28>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60bb      	str	r3, [r7, #8]
}
 80076ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076ae:	bf00      	nop
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0fc      	beq.n	80076b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000028 	.word	0x20000028
	...

080076d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <pxCurrentTCBConst2>)
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	6808      	ldr	r0, [r1, #0]
 80076d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076da:	f380 8809 	msr	PSP, r0
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8811 	msr	BASEPRI, r0
 80076ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80076ee:	4770      	bx	lr

080076f0 <pxCurrentTCBConst2>:
 80076f0:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop

080076f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80076f8:	4806      	ldr	r0, [pc, #24]	; (8007714 <prvPortStartFirstTask+0x1c>)
 80076fa:	6800      	ldr	r0, [r0, #0]
 80076fc:	6800      	ldr	r0, [r0, #0]
 80076fe:	f380 8808 	msr	MSP, r0
 8007702:	b662      	cpsie	i
 8007704:	b661      	cpsie	f
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	df00      	svc	0
 8007710:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007712:	bf00      	nop
 8007714:	e000ed08 	.word	0xe000ed08

08007718 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800771e:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <xPortStartScheduler+0xd0>)
 8007720:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <xPortStartScheduler+0xd4>)
 8007744:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007746:	4b2a      	ldr	r3, [pc, #168]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007748:	2207      	movs	r2, #7
 800774a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774c:	e009      	b.n	8007762 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800774e:	4b28      	ldr	r3, [pc, #160]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3b01      	subs	r3, #1
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007756:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d0ef      	beq.n	800774e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800776e:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f1c3 0307 	rsb	r3, r3, #7
 8007776:	2b04      	cmp	r3, #4
 8007778:	d00a      	beq.n	8007790 <xPortStartScheduler+0x78>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <xPortStartScheduler+0xd8>)
 8007798:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <xPortStartScheduler+0xd8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077a2:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <xPortStartScheduler+0xd8>)
 80077a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <xPortStartScheduler+0xdc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <xPortStartScheduler+0xdc>)
 80077b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <xPortStartScheduler+0xdc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <xPortStartScheduler+0xdc>)
 80077c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077c6:	f000 f8b9 	bl	800793c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <xPortStartScheduler+0xe0>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077d0:	f7ff ff92 	bl	80076f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077d4:	f7ff f87e 	bl	80068d4 <vTaskSwitchContext>
	prvTaskExitError();
 80077d8:	f7ff ff4a 	bl	8007670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	e000e400 	.word	0xe000e400
 80077ec:	20000f60 	.word	0x20000f60
 80077f0:	20000f64 	.word	0x20000f64
 80077f4:	e000ed20 	.word	0xe000ed20
 80077f8:	20000028 	.word	0x20000028

080077fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	607b      	str	r3, [r7, #4]
}
 8007814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <vPortEnterCritical+0x58>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3301      	adds	r3, #1
 800781c:	4a0d      	ldr	r2, [pc, #52]	; (8007854 <vPortEnterCritical+0x58>)
 800781e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <vPortEnterCritical+0x58>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10f      	bne.n	8007848 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <vPortEnterCritical+0x5c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <vPortEnterCritical+0x4c>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	603b      	str	r3, [r7, #0]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vPortEnterCritical+0x4a>
	}
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000028 	.word	0x20000028
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <vPortExitCritical+0x4c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <vPortExitCritical+0x24>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	607b      	str	r3, [r7, #4]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007880:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <vPortExitCritical+0x4c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3b01      	subs	r3, #1
 8007886:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <vPortExitCritical+0x4c>)
 8007888:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <vPortExitCritical+0x4c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <vPortExitCritical+0x42>
 8007892:	2300      	movs	r3, #0
 8007894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f383 8811 	msr	BASEPRI, r3
}
 800789c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	20000028 	.word	0x20000028
 80078ac:	00000000 	.word	0x00000000

080078b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078b0:	f3ef 8009 	mrs	r0, PSP
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <pxCurrentTCBConst>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078c0:	6010      	str	r0, [r2, #0]
 80078c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80078c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078ca:	f380 8811 	msr	BASEPRI, r0
 80078ce:	f7ff f801 	bl	80068d4 <vTaskSwitchContext>
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	6808      	ldr	r0, [r1, #0]
 80078e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078e6:	f380 8809 	msr	PSP, r0
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	4770      	bx	lr

080078f0 <pxCurrentTCBConst>:
 80078f0:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007912:	f7fe ff25 	bl	8006760 <xTaskIncrementTick>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <SysTick_Handler+0x40>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <vPortSetupTimerInterrupt+0x30>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007946:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <vPortSetupTimerInterrupt+0x34>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <vPortSetupTimerInterrupt+0x38>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a09      	ldr	r2, [pc, #36]	; (8007978 <vPortSetupTimerInterrupt+0x3c>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	4a08      	ldr	r2, [pc, #32]	; (800797c <vPortSetupTimerInterrupt+0x40>)
 800795a:	3b01      	subs	r3, #1
 800795c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800795e:	4b03      	ldr	r3, [pc, #12]	; (800796c <vPortSetupTimerInterrupt+0x30>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr
 800796c:	e000e010 	.word	0xe000e010
 8007970:	e000e018 	.word	0xe000e018
 8007974:	2000001c 	.word	0x2000001c
 8007978:	10624dd3 	.word	0x10624dd3
 800797c:	e000e014 	.word	0xe000e014

08007980 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007986:	f3ef 8305 	mrs	r3, IPSR
 800798a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d914      	bls.n	80079bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007992:	4a16      	ldr	r2, [pc, #88]	; (80079ec <vPortValidateInterruptPriority+0x6c>)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800799c:	4b14      	ldr	r3, [pc, #80]	; (80079f0 <vPortValidateInterruptPriority+0x70>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	7afa      	ldrb	r2, [r7, #11]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d20a      	bcs.n	80079bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	607b      	str	r3, [r7, #4]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079bc:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <vPortValidateInterruptPriority+0x74>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <vPortValidateInterruptPriority+0x78>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d90a      	bls.n	80079e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	603b      	str	r3, [r7, #0]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <vPortValidateInterruptPriority+0x60>
	}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr
 80079ec:	e000e3f0 	.word	0xe000e3f0
 80079f0:	20000f60 	.word	0x20000f60
 80079f4:	e000ed0c 	.word	0xe000ed0c
 80079f8:	20000f64 	.word	0x20000f64

080079fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a08:	f7fe fdf0 	bl	80065ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a0c:	4b58      	ldr	r3, [pc, #352]	; (8007b70 <pvPortMalloc+0x174>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a14:	f000 f910 	bl	8007c38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a18:	4b56      	ldr	r3, [pc, #344]	; (8007b74 <pvPortMalloc+0x178>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 808e 	bne.w	8007b42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01d      	beq.n	8007a68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d014      	beq.n	8007a68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f023 0307 	bic.w	r3, r3, #7
 8007a44:	3308      	adds	r3, #8
 8007a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <pvPortMalloc+0x6c>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	617b      	str	r3, [r7, #20]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d069      	beq.n	8007b42 <pvPortMalloc+0x146>
 8007a6e:	4b42      	ldr	r3, [pc, #264]	; (8007b78 <pvPortMalloc+0x17c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d864      	bhi.n	8007b42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a78:	4b40      	ldr	r3, [pc, #256]	; (8007b7c <pvPortMalloc+0x180>)
 8007a7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <pvPortMalloc+0x180>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a82:	e004      	b.n	8007a8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d903      	bls.n	8007aa0 <pvPortMalloc+0xa4>
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f1      	bne.n	8007a84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007aa0:	4b33      	ldr	r3, [pc, #204]	; (8007b70 <pvPortMalloc+0x174>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d04b      	beq.n	8007b42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2208      	movs	r2, #8
 8007ab0:	4413      	add	r3, r2
 8007ab2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d91f      	bls.n	8007b0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <pvPortMalloc+0xf8>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	613b      	str	r3, [r7, #16]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b06:	69b8      	ldr	r0, [r7, #24]
 8007b08:	f000 f8f8 	bl	8007cfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <pvPortMalloc+0x17c>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <pvPortMalloc+0x17c>)
 8007b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <pvPortMalloc+0x17c>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <pvPortMalloc+0x184>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d203      	bcs.n	8007b2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <pvPortMalloc+0x17c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <pvPortMalloc+0x184>)
 8007b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <pvPortMalloc+0x178>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b42:	f7fe fd61 	bl	8006608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <pvPortMalloc+0x16a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <pvPortMalloc+0x168>
	return pvReturn;
 8007b66:	69fb      	ldr	r3, [r7, #28]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20005fc0 	.word	0x20005fc0
 8007b74:	20005fcc 	.word	0x20005fcc
 8007b78:	20005fc4 	.word	0x20005fc4
 8007b7c:	20005fb8 	.word	0x20005fb8
 8007b80:	20005fc8 	.word	0x20005fc8

08007b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d048      	beq.n	8007c28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b96:	2308      	movs	r3, #8
 8007b98:	425b      	negs	r3, r3
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <vPortFree+0xac>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10a      	bne.n	8007bc8 <vPortFree+0x44>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60fb      	str	r3, [r7, #12]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <vPortFree+0x62>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60bb      	str	r3, [r7, #8]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <vPortFree+0xac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d019      	beq.n	8007c28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d115      	bne.n	8007c28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <vPortFree+0xac>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	401a      	ands	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c0c:	f7fe fcee 	bl	80065ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <vPortFree+0xb0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4413      	add	r3, r2
 8007c1a:	4a06      	ldr	r2, [pc, #24]	; (8007c34 <vPortFree+0xb0>)
 8007c1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c1e:	6938      	ldr	r0, [r7, #16]
 8007c20:	f000 f86c 	bl	8007cfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c24:	f7fe fcf0 	bl	8006608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20005fcc 	.word	0x20005fcc
 8007c34:	20005fc4 	.word	0x20005fc4

08007c38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c3e:	f245 0350 	movw	r3, #20560	; 0x5050
 8007c42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c44:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <prvHeapInit+0xac>)
 8007c46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3307      	adds	r3, #7
 8007c56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <prvHeapInit+0xac>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c70:	4a1d      	ldr	r2, [pc, #116]	; (8007ce8 <prvHeapInit+0xb0>)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <prvHeapInit+0xb0>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c84:	2208      	movs	r2, #8
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0307 	bic.w	r3, r3, #7
 8007c92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <prvHeapInit+0xb4>)
 8007c98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c9a:	4b14      	ldr	r3, [pc, #80]	; (8007cec <prvHeapInit+0xb4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <prvHeapInit+0xb4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	1ad2      	subs	r2, r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <prvHeapInit+0xb4>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4a0a      	ldr	r2, [pc, #40]	; (8007cf0 <prvHeapInit+0xb8>)
 8007cc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <prvHeapInit+0xbc>)
 8007cce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <prvHeapInit+0xc0>)
 8007cd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000f68 	.word	0x20000f68
 8007ce8:	20005fb8 	.word	0x20005fb8
 8007cec:	20005fc0 	.word	0x20005fc0
 8007cf0:	20005fc8 	.word	0x20005fc8
 8007cf4:	20005fc4 	.word	0x20005fc4
 8007cf8:	20005fcc 	.word	0x20005fcc

08007cfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d04:	4b27      	ldr	r3, [pc, #156]	; (8007da4 <prvInsertBlockIntoFreeList+0xa8>)
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	e002      	b.n	8007d10 <prvInsertBlockIntoFreeList+0x14>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d8f7      	bhi.n	8007d0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	4413      	add	r3, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d108      	bne.n	8007d3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	441a      	add	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d118      	bne.n	8007d84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <prvInsertBlockIntoFreeList+0xac>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d00d      	beq.n	8007d7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	441a      	add	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e008      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <prvInsertBlockIntoFreeList+0xac>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e003      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d002      	beq.n	8007d9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr
 8007da4:	20005fb8 	.word	0x20005fb8
 8007da8:	20005fc0 	.word	0x20005fc0

08007dac <memset>:
 8007dac:	4402      	add	r2, r0
 8007dae:	4603      	mov	r3, r0
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d100      	bne.n	8007db6 <memset+0xa>
 8007db4:	4770      	bx	lr
 8007db6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dba:	e7f9      	b.n	8007db0 <memset+0x4>

08007dbc <_reclaim_reent>:
 8007dbc:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <_reclaim_reent+0xa8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4283      	cmp	r3, r0
 8007dc2:	b570      	push	{r4, r5, r6, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	d04b      	beq.n	8007e60 <_reclaim_reent+0xa4>
 8007dc8:	69c3      	ldr	r3, [r0, #28]
 8007dca:	b143      	cbz	r3, 8007dde <_reclaim_reent+0x22>
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d144      	bne.n	8007e5c <_reclaim_reent+0xa0>
 8007dd2:	69e3      	ldr	r3, [r4, #28]
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x22>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 f879 	bl	8007ed0 <_free_r>
 8007dde:	6961      	ldr	r1, [r4, #20]
 8007de0:	b111      	cbz	r1, 8007de8 <_reclaim_reent+0x2c>
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 f874 	bl	8007ed0 <_free_r>
 8007de8:	69e1      	ldr	r1, [r4, #28]
 8007dea:	b111      	cbz	r1, 8007df2 <_reclaim_reent+0x36>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 f86f 	bl	8007ed0 <_free_r>
 8007df2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007df4:	b111      	cbz	r1, 8007dfc <_reclaim_reent+0x40>
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 f86a 	bl	8007ed0 <_free_r>
 8007dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfe:	b111      	cbz	r1, 8007e06 <_reclaim_reent+0x4a>
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 f865 	bl	8007ed0 <_free_r>
 8007e06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e08:	b111      	cbz	r1, 8007e10 <_reclaim_reent+0x54>
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 f860 	bl	8007ed0 <_free_r>
 8007e10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e12:	b111      	cbz	r1, 8007e1a <_reclaim_reent+0x5e>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 f85b 	bl	8007ed0 <_free_r>
 8007e1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e1c:	b111      	cbz	r1, 8007e24 <_reclaim_reent+0x68>
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f856 	bl	8007ed0 <_free_r>
 8007e24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e26:	b111      	cbz	r1, 8007e2e <_reclaim_reent+0x72>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f851 	bl	8007ed0 <_free_r>
 8007e2e:	6a23      	ldr	r3, [r4, #32]
 8007e30:	b1b3      	cbz	r3, 8007e60 <_reclaim_reent+0xa4>
 8007e32:	4620      	mov	r0, r4
 8007e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e38:	4718      	bx	r3
 8007e3a:	5949      	ldr	r1, [r1, r5]
 8007e3c:	b941      	cbnz	r1, 8007e50 <_reclaim_reent+0x94>
 8007e3e:	3504      	adds	r5, #4
 8007e40:	69e3      	ldr	r3, [r4, #28]
 8007e42:	2d80      	cmp	r5, #128	; 0x80
 8007e44:	68d9      	ldr	r1, [r3, #12]
 8007e46:	d1f8      	bne.n	8007e3a <_reclaim_reent+0x7e>
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 f841 	bl	8007ed0 <_free_r>
 8007e4e:	e7c0      	b.n	8007dd2 <_reclaim_reent+0x16>
 8007e50:	680e      	ldr	r6, [r1, #0]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f83c 	bl	8007ed0 <_free_r>
 8007e58:	4631      	mov	r1, r6
 8007e5a:	e7ef      	b.n	8007e3c <_reclaim_reent+0x80>
 8007e5c:	2500      	movs	r5, #0
 8007e5e:	e7ef      	b.n	8007e40 <_reclaim_reent+0x84>
 8007e60:	bd70      	pop	{r4, r5, r6, pc}
 8007e62:	bf00      	nop
 8007e64:	20000078 	.word	0x20000078

08007e68 <__libc_init_array>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ea0 <__libc_init_array+0x38>)
 8007e6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ea4 <__libc_init_array+0x3c>)
 8007e6e:	1b64      	subs	r4, r4, r5
 8007e70:	10a4      	asrs	r4, r4, #2
 8007e72:	2600      	movs	r6, #0
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	d109      	bne.n	8007e8c <__libc_init_array+0x24>
 8007e78:	4d0b      	ldr	r5, [pc, #44]	; (8007ea8 <__libc_init_array+0x40>)
 8007e7a:	4c0c      	ldr	r4, [pc, #48]	; (8007eac <__libc_init_array+0x44>)
 8007e7c:	f000 f87e 	bl	8007f7c <_init>
 8007e80:	1b64      	subs	r4, r4, r5
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	2600      	movs	r6, #0
 8007e86:	42a6      	cmp	r6, r4
 8007e88:	d105      	bne.n	8007e96 <__libc_init_array+0x2e>
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e90:	4798      	blx	r3
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7ee      	b.n	8007e74 <__libc_init_array+0xc>
 8007e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9a:	4798      	blx	r3
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	e7f2      	b.n	8007e86 <__libc_init_array+0x1e>
 8007ea0:	08008140 	.word	0x08008140
 8007ea4:	08008140 	.word	0x08008140
 8007ea8:	08008140 	.word	0x08008140
 8007eac:	08008144 	.word	0x08008144

08007eb0 <__retarget_lock_acquire_recursive>:
 8007eb0:	4770      	bx	lr

08007eb2 <__retarget_lock_release_recursive>:
 8007eb2:	4770      	bx	lr

08007eb4 <memcpy>:
 8007eb4:	440a      	add	r2, r1
 8007eb6:	4291      	cmp	r1, r2
 8007eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ebc:	d100      	bne.n	8007ec0 <memcpy+0xc>
 8007ebe:	4770      	bx	lr
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	d1f9      	bne.n	8007ec2 <memcpy+0xe>
 8007ece:	bd10      	pop	{r4, pc}

08007ed0 <_free_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d041      	beq.n	8007f5c <_free_r+0x8c>
 8007ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007edc:	1f0c      	subs	r4, r1, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfb8      	it	lt
 8007ee2:	18e4      	addlt	r4, r4, r3
 8007ee4:	f000 f83e 	bl	8007f64 <__malloc_lock>
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <_free_r+0x90>)
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	b933      	cbnz	r3, 8007efc <_free_r+0x2c>
 8007eee:	6063      	str	r3, [r4, #4]
 8007ef0:	6014      	str	r4, [r2, #0]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef8:	f000 b83a 	b.w	8007f70 <__malloc_unlock>
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d908      	bls.n	8007f12 <_free_r+0x42>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	1821      	adds	r1, r4, r0
 8007f04:	428b      	cmp	r3, r1
 8007f06:	bf01      	itttt	eq
 8007f08:	6819      	ldreq	r1, [r3, #0]
 8007f0a:	685b      	ldreq	r3, [r3, #4]
 8007f0c:	1809      	addeq	r1, r1, r0
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	e7ed      	b.n	8007eee <_free_r+0x1e>
 8007f12:	461a      	mov	r2, r3
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b10b      	cbz	r3, 8007f1c <_free_r+0x4c>
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d9fa      	bls.n	8007f12 <_free_r+0x42>
 8007f1c:	6811      	ldr	r1, [r2, #0]
 8007f1e:	1850      	adds	r0, r2, r1
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d10b      	bne.n	8007f3c <_free_r+0x6c>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	4401      	add	r1, r0
 8007f28:	1850      	adds	r0, r2, r1
 8007f2a:	4283      	cmp	r3, r0
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	d1e0      	bne.n	8007ef2 <_free_r+0x22>
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	6053      	str	r3, [r2, #4]
 8007f36:	4408      	add	r0, r1
 8007f38:	6010      	str	r0, [r2, #0]
 8007f3a:	e7da      	b.n	8007ef2 <_free_r+0x22>
 8007f3c:	d902      	bls.n	8007f44 <_free_r+0x74>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	602b      	str	r3, [r5, #0]
 8007f42:	e7d6      	b.n	8007ef2 <_free_r+0x22>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	1821      	adds	r1, r4, r0
 8007f48:	428b      	cmp	r3, r1
 8007f4a:	bf04      	itt	eq
 8007f4c:	6819      	ldreq	r1, [r3, #0]
 8007f4e:	685b      	ldreq	r3, [r3, #4]
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	bf04      	itt	eq
 8007f54:	1809      	addeq	r1, r1, r0
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	6054      	str	r4, [r2, #4]
 8007f5a:	e7ca      	b.n	8007ef2 <_free_r+0x22>
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000610c 	.word	0x2000610c

08007f64 <__malloc_lock>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__malloc_lock+0x8>)
 8007f66:	f7ff bfa3 	b.w	8007eb0 <__retarget_lock_acquire_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20006108 	.word	0x20006108

08007f70 <__malloc_unlock>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__malloc_unlock+0x8>)
 8007f72:	f7ff bf9e 	b.w	8007eb2 <__retarget_lock_release_recursive>
 8007f76:	bf00      	nop
 8007f78:	20006108 	.word	0x20006108

08007f7c <_init>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr

08007f88 <_fini>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr
